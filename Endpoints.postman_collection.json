{
	"info": {
		"_postman_id": "f3391609-c1cd-45ec-9b2c-5df46e9c21d8",
		"name": "Endpoints",
		"description": "- Log\n\n- Create a connector that return page with url \"http://www.leboncoin.fr\"\n- Create a synchronous GET endpoint for that connector\n- Test the result\n\n- Create an extractor that return some odd data whatever the document\n- Create an asynchronous POST endpoint for that extractor\n- Start the execution\n- Retrieve the result\n\n- Update one endpoint\n- Delete endpoints\n- Delete extractor and connector\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81606899-040a-4cda-813d-3275ae195602",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.get(\"variable_key\");",
									"var json = pm.response.json();",
									"var token = json[\"access_token\"];",
									"var refreshToken = json[\"refresh_token\"]",
									"pm.environment.set(\"access_token\", token);",
									"pm.environment.set(\"refresh_token\", refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{keycloakClientId}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{keycloakUsername}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{keycloakPassword}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{keycloakClientSecret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/auth/realms/meveo/protocol/openid-connect/token",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"realms",
								"meveo",
								"protocol",
								"openid-connect",
								"token"
							]
						},
						"description": "Request Keycloak and get auth token"
					},
					"response": []
				}
			]
		},
		{
			"name": "EndPoints",
			"item": [
				{
					"name": "Create GetProjects script",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.GetProjectsScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.hibernate.criterion.ProjectionList;\\r\\nimport org.keycloak.common.util.CollectionUtil;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.api.exception.BusinessApiException;\\r\\nimport org.meveo.commons.utils.ParamBean;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.io.File;\\r\\nimport java.io.FileInputStream;\\r\\nimport java.io.IOException;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class GetProjectsScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(GetProjectsScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private Map<String, Object> responseMap = new HashMap<>();\\r\\n\\r\\n    private String getPhoto(String fileName) throws BusinessApiException {\\r\\n        String meveoPath = ParamBean.getInstance().getProperty(\\\"providers.rootDir\\\", \\\"\\/opt\\/wildfly\\/opencelldata\\/\\\");\\r\\n        String rootProviderDir = ParamBean.getInstance().getProperty(\\\"provider.rootDir\\\", \\\"manaty\\\");;\\r\\n        File file = new File(meveoPath + File.separator + rootProviderDir + File.separator + fileName);\\r\\n\\r\\n        if (!file.exists()) {\\r\\n            throw new BusinessApiException(\\\"File does not exists: \\\" + file.getPath());\\r\\n        }\\r\\n        try {\\r\\n            FileInputStream fis = new FileInputStream(file);\\r\\n            byte[] bytes = new byte[(int)file.length()];\\r\\n            fis.read(bytes);\\r\\n            return Base64.getEncoder().encodeToString(bytes);\\r\\n        } catch (IOException e) {\\r\\n            throw new BusinessApiException(\\\"Error file: \\\" + file.getName() + \\\". \\\" + e.getMessage());\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        List<ProjectResponseDto> projectResponseDtos = new ArrayList<>();\\r\\n        List<CustomEntityInstance> projectUsers = customEntityInstanceService.findByCode(\\\"ProjectUser\\\", \\\"\\\");\\r\\n        if (CollectionUtils.isNotEmpty(projectUsers)) {\\r\\n            for (CustomEntityInstance entityInstance : projectUsers) {\\r\\n                ProjectResponseDto projectResponseDto = new ProjectResponseDto();\\r\\n                projectResponseDto.setCode(entityInstance.getCode());\\r\\n                String name = (String) customFieldInstanceService.getCFValue(entityInstance, \\\"name\\\");\\r\\n                EntityReferenceWrapper childEntityReference = (EntityReferenceWrapper) customFieldInstanceService.getCFValue(entityInstance, \\\"client\\\");\\r\\n                String client = \\\"\\\";\\r\\n                    if (childEntityReference != null) {\\r\\n                        client = childEntityReference.getCode();\\r\\n                }\\r\\n                String link = (String) customFieldInstanceService.getCFValue(entityInstance, \\\"link\\\");\\r\\n                String logo = (String) customFieldInstanceService.getCFValue(entityInstance, \\\"logo\\\");\\r\\n                if (logo == null) {\\r\\n                    logo = \\\"\\\";\\r\\n                }\\r\\n                String assemblaLink = (String) customFieldInstanceService.getCFValue(entityInstance, \\\"assemblaLink\\\");\\r\\n                String shortDescription = (String) customFieldInstanceService.getCFValue(entityInstance, \\\"shortDescription\\\");\\r\\n                String longDescription = (String) customFieldInstanceService.getCFValue(entityInstance, \\\"longDescription\\\");\\r\\n                if (shortDescription == null) {\\r\\n                    shortDescription = \\\"\\\";\\r\\n                }\\r\\n                Date dateStart = (Date) customFieldInstanceService.getCFValue(entityInstance, \\\"dateStart\\\");\\r\\n                Date dateEnd = (Date) customFieldInstanceService.getCFValue(entityInstance, \\\"dateEnd\\\");\\r\\n\\r\\n                if (!StringUtils.isBlank(logo)){\\r\\n                    try {\\r\\n                        projectResponseDto.setLogoBase64(getPhoto(logo));\\r\\n                    } catch (BusinessApiException e) {\\r\\n\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                projectResponseDto.setName(name);\\r\\n                projectResponseDto.setClient(client);\\r\\n                projectResponseDto.setLink(link);\\r\\n                projectResponseDto.setLogo(logo);\\r\\n                projectResponseDto.setAssemblaLink(assemblaLink);\\r\\n                projectResponseDto.setLongDescription(longDescription);\\r\\n                projectResponseDto.setShortDescription(shortDescription);\\r\\n                projectResponseDto.setDateEnd(DateUtils.formatDateWithPattern(dateEnd, \\\"yyyy\\/MM\\/dd\\\"));\\r\\n                projectResponseDto.setDateStart(DateUtils.formatDateWithPattern(dateStart, \\\"yyyy\\/MM\\/dd\\\"));\\r\\n\\r\\n                List<Contact> contacts = new ArrayList<>();\\r\\n                List<EntityReferenceWrapper> childEntityReferencesContacts = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(entityInstance, \\\"contacts\\\");\\r\\n                if (CollectionUtils.isNotEmpty(childEntityReferencesContacts)) {\\r\\n                    for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesContacts) {\\r\\n                        CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                        if (cei == null) {\\r\\n                            continue;\\r\\n                        }\\r\\n                        Contact contact = new Contact();\\r\\n                        String contactName = (String) customFieldInstanceService.getCFValue(cei,\\\"name\\\");\\r\\n                        String position = (String) customFieldInstanceService.getCFValue(cei,\\\"position\\\");\\r\\n                        String mail = (String) customFieldInstanceService.getCFValue(cei, \\\"mail\\\");\\r\\n                        String skype = (String) customFieldInstanceService.getCFValue(cei, \\\"skype\\\");\\r\\n                        String tel = (String) customFieldInstanceService.getCFValue(cei, \\\"tel\\\");\\r\\n\\r\\n                        contact.setName(contactName);\\r\\n                        contact.setPosition(position);\\r\\n                        contact.setMail(mail);\\r\\n                        contact.setSkype(skype);\\r\\n                        contact.setTel(tel);\\r\\n                        contact.setId(cei.getId());\\r\\n                        contacts.add(contact);\\r\\n                    }\\r\\n                    projectResponseDto.setContacts(contacts);\\r\\n                } else {\\r\\n                    projectResponseDto.setContacts( new ArrayList<Contact>());\\r\\n                }\\r\\n\\r\\n                List<Team> teams = new ArrayList<>();\\r\\n                List<EntityReferenceWrapper> childEntityReferencesTeams = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(entityInstance, \\\"teams\\\");\\r\\n                if (CollectionUtils.isNotEmpty(childEntityReferencesTeams)) {\\r\\n                    for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesTeams) {\\r\\n                        CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                        if (cei == null) {\\r\\n                            continue;\\r\\n                        }\\r\\n                        Team team = new Team();\\r\\n                        String teamName = (String) customFieldInstanceService.getCFValue(cei,\\\"name\\\");\\r\\n                        String role = (String) customFieldInstanceService.getCFValue(cei,\\\"role\\\");\\r\\n                        team.setName(teamName);\\r\\n                        team.setRole(role);\\r\\n                        User user = userService.findByUsername(teamName);\\r\\n                        if (user == null) {\\r\\n                            continue;\\r\\n                        }\\r\\n                        if(user.getName() != null) {\\r\\n                            if (!StringUtils.isBlank(user.getName().getFirstName()) && !StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                                team.setFullName(user.getName().getFirstName() + \\\" \\\" + user.getName().getLastName());\\r\\n                            }\\r\\n                            else if (StringUtils.isBlank(user.getName().getFirstName()) && !StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                                team.setFullName(user.getName().getLastName());\\r\\n                            }\\r\\n                            else if (!StringUtils.isBlank(user.getName().getFirstName()) && StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                                team.setFullName(user.getName().getFirstName());\\r\\n                            }\\r\\n                            else {\\r\\n                                team.setFullName(\\\"\\\");\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        String photo = (String) customFieldInstanceService.getCFValue(user, \\\"photo\\\");\\r\\n                        if (!StringUtils.isBlank(photo)) {\\r\\n                            try {\\r\\n                                team.setPhotoBase64(this.getPhoto(photo));\\r\\n                            } catch (BusinessApiException e) {\\r\\n                                log.info(\\\"Error photoBase64 size {}\\\", e.getMessage());\\r\\n                            }\\r\\n                        } else {\\r\\n                            team.setPhotoBase64(\\\"\\\");\\r\\n                        }\\r\\n                        teams.add(team);\\r\\n                    }\\r\\n                    projectResponseDto.setTeams(teams);\\r\\n                } else {\\r\\n                    projectResponseDto.setTeams( new ArrayList<Team>());\\r\\n                }\\r\\n                projectResponseDtos.add(projectResponseDto);\\r\\n            }\\r\\n            responseMap.put(\\\"projectUsers\\\", projectResponseDtos);\\r\\n        } else {\\r\\n            responseMap.put(\\\"projectUsers\\\", null);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n  public class ProjectResponseDto  {\\r\\n      private String code;\\r\\n      private String name;\\r\\n      private String client;\\r\\n      private String dateStart;\\r\\n      private String dateEnd;\\r\\n      private String longDescription;\\r\\n      private String link;\\r\\n      private String logo;\\r\\n      private String logoBase64;\\r\\n      private String assemblaLink;\\r\\n      private String shortDescription;\\r\\n      private List<Contact> contacts;\\r\\n      private List<Team> teams;\\r\\n\\r\\n      public String getCode() { return code; }\\r\\n\\r\\n      public void setCode(String code) { this.code = code; }\\r\\n\\r\\n      public String getName() { return name; }\\r\\n\\r\\n      public void setName(String name) { this.name = name; }\\r\\n\\r\\n      public String getClient() { return client; }\\r\\n\\r\\n      public void setClient(String client) { this.client = client; }\\r\\n\\r\\n      public String getDateStart() { return dateStart; }\\r\\n\\r\\n      public void setDateStart(String dateStart) { this.dateStart = dateStart; }\\r\\n\\r\\n      public String getDateEnd() { return dateEnd; }\\r\\n\\r\\n      public void setDateEnd(String dateEnd) { this.dateEnd = dateEnd; }\\r\\n\\r\\n      public String getLongDescription() {\\r\\n          return longDescription;\\r\\n      }\\r\\n\\r\\n      public void setLongDescription(String longDescription) {\\r\\n          this.longDescription = longDescription;\\r\\n      }\\r\\n\\r\\n      public String getLink() { return link; }\\r\\n\\r\\n      public void setLink(String link) { this.link = link; }\\r\\n\\r\\n      public String getLogo() { return logo; }\\r\\n\\r\\n      public void setLogo(String logo) { this.logo = logo; }\\r\\n\\r\\n      public String getAssemblaLink() { return assemblaLink; }\\r\\n\\r\\n      public void setAssemblaLink(String assemblaLink) { this.assemblaLink = assemblaLink; }\\r\\n\\r\\n      public String getShortDescription() { return shortDescription; }\\r\\n\\r\\n      public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; }\\r\\n\\r\\n      public List<Contact> getContacts() { return contacts; }\\r\\n\\r\\n      public void setContacts(List<Contact> contacts) { this.contacts = contacts; }\\r\\n\\r\\n      public List<Team> getTeams() { return teams; }\\r\\n\\r\\n      public void setTeams(List<Team> teams) { this.teams = teams; }\\r\\n\\r\\n      public String getLogoBase64() {\\r\\n          return logoBase64;\\r\\n      }\\r\\n\\r\\n      public void setLogoBase64(String logoBase64) {\\r\\n          this.logoBase64 = logoBase64;\\r\\n      }\\r\\n  }\\r\\n\\r\\n    public class Contact {\\r\\n\\r\\n        private String name;\\r\\n        private String position;\\r\\n        private String mail;\\r\\n        private String skype;\\r\\n        private String tel;\\r\\n        private Long id;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public String getPosition() { return position; }\\r\\n\\r\\n        public void setPosition(String position) { this.position = position; }\\r\\n\\r\\n        public String getMail() { return mail; }\\r\\n\\r\\n        public void setMail(String email) { this.mail = mail; }\\r\\n\\r\\n        public String getSkype() { return skype; }\\r\\n\\r\\n        public void setSkype(String skype) { this.skype = skype; }\\r\\n\\r\\n        public String getTel() { return tel; }\\r\\n\\r\\n        public void setTel(String tel) { this.tel = tel; }\\r\\n\\r\\n        public Long getId() { return id; }\\r\\n\\r\\n        public void setId(Long id) { this.id = id; }\\r\\n    }\\r\\n\\r\\n    public class Team  {\\r\\n\\r\\n        private String name;\\r\\n        private String role;\\r\\n        private String fullName;\\r\\n        private String photoBase64;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public String getRole() { return role; }\\r\\n\\r\\n        public void setRole(String role) { this.role = role; }\\r\\n\\r\\n        public String getFullName() { return fullName; }\\r\\n\\r\\n        public void setFullName(String fullName) { this.fullName = fullName; }\\r\\n\\r\\n        public String getPhotoBase64() { return photoBase64; }\\r\\n\\r\\n        public void setPhotoBase64(String photoBase64) { this.photoBase64 = photoBase64; }\\r\\n    }\\r\\n\\r\\n    public Map<String, Object> getResponseMap() { return responseMap; }\\r\\n\\r\\n\\r\\n\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveProject script ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveProjectScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveProjectScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveProjectScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String code;\\r\\n    private String link;\\r\\n    private String logo;\\r\\n    private String longDescription;\\r\\n\\r\\n    private ArrayList<LinkedHashMap<String, Object>> contacts;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n\\r\\n        CustomEntityInstance project = customEntityInstanceService.findByCodeByCet(\\\"ProjectUser\\\", getCode());\\r\\n        if (project == null) {\\r\\n            project = new CustomEntityInstance();\\r\\n            project.setCetCode(\\\"ProjectUser\\\");\\r\\n            project.setCode(getCode());\\r\\n            project.setDescription(getCode());\\r\\n            customEntityInstanceService.create(project);\\r\\n        } else {\\r\\n            project.setCetCode(\\\"ProjectUser\\\");\\r\\n            project.setCode(getCode());\\r\\n            project.setDescription(getCode());\\r\\n            customEntityInstanceService.update(project);\\r\\n        }\\r\\n        if (getLink() != null) {\\r\\n            customFieldInstanceService.setCFValue(project, \\\"link\\\", getLink());\\r\\n        }\\r\\n        if (!StringUtils.isBlank(getLogo())) {\\r\\n            customFieldInstanceService.setCFValue(project, \\\"logo\\\", getLogo());\\r\\n        }\\r\\n        if (!StringUtils.isBlank(getLongDescription())) {\\r\\n            customFieldInstanceService.setCFValue(project, \\\"longDescription\\\", getLongDescription());\\r\\n        }\\r\\n\\r\\n        List<EntityReferenceWrapper> childEntityReferences = new ArrayList<>();\\r\\n        log.info(\\\"contacts...{}\\\", contacts.size());\\r\\n        if (CollectionUtils.isNotEmpty(contacts)) {\\r\\n            for (LinkedHashMap<String, Object> contactMap : contacts) {\\r\\n                String name = (String) getValue(contactMap,\\\"name\\\");\\r\\n                String mail =  (String) getValue(contactMap,\\\"mail\\\");\\r\\n                String position = (String) getValue(contactMap,\\\"position\\\");\\r\\n                String skype = (String) getValue(contactMap,\\\"skype\\\");\\r\\n                String tel = (String) getValue(contactMap,\\\"tel\\\");\\r\\n                CustomEntityInstance contact = customEntityInstanceService.findByCodeByCet(\\\"Contact\\\", name);\\r\\n                if (contact == null) {\\r\\n                    contact = new CustomEntityInstance();\\r\\n                    contact.setCetCode(\\\"Contact\\\");\\r\\n                    contact.setCode(name);\\r\\n                    contact.setDescription(name);\\r\\n                    customEntityInstanceService.create(contact);\\r\\n                } else {\\r\\n                    contact.setCetCode(\\\"Contact\\\");\\r\\n                    contact.setCode(name);\\r\\n                    contact.setDescription(name);\\r\\n                    customEntityInstanceService.update(contact);\\r\\n                }\\r\\n                customFieldInstanceService.setCFValue(contact,\\\"name\\\",name);\\r\\n                customFieldInstanceService.setCFValue(contact,\\\"mail\\\", mail);\\r\\n                customFieldInstanceService.setCFValue(contact,\\\"position\\\", position);\\r\\n                customFieldInstanceService.setCFValue(contact,\\\"skype\\\", skype);\\r\\n                customFieldInstanceService.setCFValue(contact,\\\"tel\\\", tel);\\r\\n                EntityReferenceWrapper entityReferenceWrapper = new EntityReferenceWrapper(contact);\\r\\n                childEntityReferences.add(entityReferenceWrapper);\\r\\n            }\\r\\n            customFieldInstanceService.setCFValue(project,\\\"contacts\\\", childEntityReferences);\\r\\n        } else {\\r\\n            customFieldInstanceService.setCFValue(project,\\\"contacts\\\", null);\\r\\n        }\\r\\n    }\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    public class Contact {\\r\\n\\r\\n        private String name;\\r\\n        private String position;\\r\\n        private String mail;\\r\\n        private String skype;\\r\\n        private String tel;\\r\\n        private Long id;\\r\\n\\r\\n        public String getName() {\\r\\n            return name;\\r\\n        }\\r\\n\\r\\n        public void setName(String name) {\\r\\n            this.name = name;\\r\\n        }\\r\\n\\r\\n        public String getPosition() { return position; }\\r\\n\\r\\n        public void setPosition(String position) {\\r\\n            this.position = position;\\r\\n        }\\r\\n\\r\\n        public String getMail() {\\r\\n            return mail;\\r\\n        }\\r\\n\\r\\n        public void setMail(String mail) {\\r\\n            this.mail = mail;\\r\\n        }\\r\\n\\r\\n        public String getSkype() {\\r\\n            return skype;\\r\\n        }\\r\\n\\r\\n        public void setSkype(String skype) {\\r\\n            this.skype = skype;\\r\\n        }\\r\\n\\r\\n        public String getTel() {\\r\\n            return tel;\\r\\n        }\\r\\n\\r\\n        public void setTel(String tel) {\\r\\n            this.tel = tel;\\r\\n        }\\r\\n\\r\\n        public Long getId() {\\r\\n            return id;\\r\\n        }\\r\\n\\r\\n        public void setId(Long id) {\\r\\n            this.id = id;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? inputMap.get(key) instanceof Integer ? String.valueOf(inputMap.get(key)) : (String)inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public String getCode() { return code; }\\r\\n\\r\\n    public void setCode(String code) { this.code = code; }\\r\\n\\r\\n    public String getLink() { return link; }\\r\\n\\r\\n    public void setLink(String link) { this.link = link; }\\r\\n\\r\\n    public String getLogo() { return logo; }\\r\\n\\r\\n    public void setLogo(String logo) { this.logo = logo; }\\r\\n\\r\\n    public String getLongDescription() {\\r\\n        return longDescription;\\r\\n    }\\r\\n\\r\\n    public void setLongDescription(String longDescription) {\\r\\n        this.longDescription = longDescription;\\r\\n    }\\r\\n\\r\\n    public void setContacts(ArrayList<LinkedHashMap<String, Object>> contacts) { this.contacts = contacts; }\\r\\n\\r\\n\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GenerateCV script  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.GenerateCVScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport com.thoughtworks.xstream.core.util.QuickWriter;\\r\\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\\r\\nimport com.thoughtworks.xstream.io.naming.NameCoder;\\r\\nimport com.thoughtworks.xstream.io.xml.PrettyPrintWriter;\\r\\nimport net.sf.jasperreports.engine.JRException;\\r\\nimport net.sf.jasperreports.engine.JasperFillManager;\\r\\nimport net.sf.jasperreports.engine.JasperPrint;\\r\\nimport net.sf.jasperreports.engine.JasperReport;\\r\\nimport net.sf.jasperreports.engine.data.JRXmlDataSource;\\r\\nimport net.sf.jasperreports.engine.export.JRPdfExporter;\\r\\nimport net.sf.jasperreports.engine.util.JRLoader;\\r\\nimport net.sf.jasperreports.export.Exporter;\\r\\nimport net.sf.jasperreports.export.SimpleExporterInput;\\r\\nimport net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.apache.commons.io.FileUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.exceptions.ConfigurationException;\\r\\nimport org.meveo.commons.utils.ParamBean;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.commons.utils.XStreamCDATAConverter;\\r\\nimport org.meveo.export.ExportImportStatistics;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\nimport org.w3c.dom.Document;\\r\\nimport org.w3c.dom.Node;\\r\\nimport org.xml.sax.SAXException;\\r\\n\\r\\n\\r\\nimport javax.annotation.PostConstruct;\\r\\nimport javax.xml.parsers.DocumentBuilder;\\r\\nimport javax.xml.parsers.DocumentBuilderFactory;\\r\\nimport javax.xml.parsers.ParserConfigurationException;\\r\\nimport javax.xml.transform.OutputKeys;\\r\\nimport javax.xml.transform.Transformer;\\r\\nimport javax.xml.transform.TransformerException;\\r\\nimport javax.xml.transform.TransformerFactory;\\r\\nimport javax.xml.transform.dom.DOMSource;\\r\\nimport javax.xml.transform.stream.StreamResult;\\r\\nimport java.io.*;\\r\\nimport java.nio.charset.StandardCharsets;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class GenerateCVScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(GenerateCVScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private CountryUtils countryUtils;\\r\\n    private String username;\\r\\n    private String meveoPath = null;\\r\\n    private String rootProviderDir = null;\\r\\n    private ParamBean param = ParamBean.getInstance();\\r\\n    private LinkedHashMap responseValues = new LinkedHashMap();\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        generateXML(user);\\r\\n        String fileName = generateCV(user);\\r\\n        File file = new File(fileName);\\r\\n        try {\\r\\n            responseValues.put(\\\"fileName\\\", file.getName());\\r\\n            byte[] fileBytes = new byte[(int) file.length()];\\r\\n            FileInputStream fileInputStream = new FileInputStream(file);\\r\\n            fileInputStream.read(fileBytes);\\r\\n            responseValues.put(\\\"document\\\", Base64.getEncoder().encodeToString(fileBytes));\\r\\n        } catch (Exception ex) {\\r\\n            responseValues.put(\\\"fileName\\\", \\\"\\\");\\r\\n            responseValues.put(\\\"document\\\", \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n        meveoPath = ParamBean.getInstance().getProperty(\\\"providers.rootDir\\\", \\\"\\/opt\\/wildfly\\/opencelldata\\/\\\");\\r\\n        rootProviderDir = ParamBean.getInstance().getProperty(\\\"provider.rootDir\\\", \\\"manaty\\\");\\r\\n        countryUtils = new CountryUtils();\\r\\n    }\\r\\n\\r\\n    private class EntityExportWriter extends PrettyPrintWriter {\\r\\n\\r\\n        private boolean attributeClassAdded = false;\\r\\n\\r\\n        public EntityExportWriter(Writer out) { super(out); }\\r\\n        public EntityExportWriter(Writer out, NameCoder nameCoder) { super(out, nameCoder); }\\r\\n\\r\\n        @Override\\r\\n        public void addAttribute(String key, String value) {\\r\\n            if (key.equals(\\\"class\\\")) {\\r\\n                if (attributeClassAdded) {\\r\\n                    return;\\r\\n                }\\r\\n                attributeClassAdded = true;\\r\\n            }\\r\\n            super.addAttribute(key, value);\\r\\n        }\\r\\n\\r\\n            @Override\\r\\n            protected void writeText(QuickWriter writer, String text) {\\r\\n            if (text == null) {\\r\\n                writer.write(\\\"\\\");\\r\\n            } else if (text.indexOf(XStreamCDATAConverter.CDATA_START) >= 0 && text.indexOf(XStreamCDATAConverter.CDATA_END) > 0) {\\r\\n                writer.write(text);\\r\\n            } else {\\r\\n                super.writeText(writer, text);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        @Override\\r\\n        public void endNode() {\\r\\n            super.endNode();\\r\\n            attributeClassAdded = false;\\r\\n        }\\r\\n    }\\r\\n    private String getNodeXmlString(Node node) {\\r\\n        try {\\r\\n            TransformerFactory transFactory = TransformerFactory.newInstance();\\r\\n            Transformer transformer = transFactory.newTransformer();\\r\\n            StringWriter buffer = new StringWriter();\\r\\n            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \\\"yes\\\");\\r\\n            transformer.transform(new DOMSource(node), new StreamResult(buffer));\\r\\n            return buffer.toString();\\r\\n        } catch (Exception e) {\\r\\n            log.error(\\\"Error converting xml node to its string representation. {}\\\", e);\\r\\n            throw new ConfigurationException();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public void generateXML(User user) throws BusinessException {\\r\\n        ExportImportStatistics exportStats = new ExportImportStatistics();\\r\\n\\r\\n        String shortFilename = user.getUserName();\\r\\n\\r\\n        String path = param.getChrootDir(meveoPath) + File.separator + rootProviderDir;\\r\\n        if (!path.endsWith(File.separator)) {\\r\\n            path = path + File.separator;\\r\\n        }\\r\\n        path = path + \\\"exports\\\";\\r\\n        String filename = path + File.separator + shortFilename + \\\".xml\\\";\\r\\n        Writer fileWriter = null;\\r\\n        try {\\r\\n            log.info(\\\"Exporting data to a file {}\\\", filename);\\r\\n            FileUtils.forceMkdir(new File(path));\\r\\n\\r\\n            fileWriter = new FileWriter(filename);\\r\\n\\r\\n            HierarchicalStreamWriter writer = new EntityExportWriter(fileWriter);\\r\\n\\r\\n            \\/\\/ Open root node\\r\\n            writer.startNode(\\\"User\\\");\\r\\n            writer.addAttribute(\\\"userName\\\", shortFilename);\\r\\n            String fullName = \\\"\\\";\\r\\n            if (user.getName() != null) {\\r\\n                if (!org.meveo.commons.utils.StringUtils.isBlank(user.getName().getFirstName()) && !org.meveo.commons.utils.StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                    fullName = user.getName().getFirstName() + \\\" \\\" + user.getName().getLastName();\\r\\n                } else if (org.meveo.commons.utils.StringUtils.isBlank(user.getName().getFirstName()) && !org.meveo.commons.utils.StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                    fullName = user.getName().getLastName();\\r\\n                } else if (!org.meveo.commons.utils.StringUtils.isBlank(user.getName().getFirstName()) && StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                    fullName = user.getName().getFirstName();\\r\\n                }\\r\\n            }\\r\\n            writer.startNode(\\\"fullName\\\");\\r\\n            writer.setValue(fullName);\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"country\\\");\\r\\n            String countryCode = (String) customFieldInstanceService.getCFValue(user,\\\"country\\\");\\r\\n            writer.setValue(countryUtils.getCountryName(Locale.US, countryCode));\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"job\\\");\\r\\n            String job = (String) customFieldInstanceService.getCFValue(user, \\\"job\\\");\\r\\n            writer.setValue(job);\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"skills\\\");\\r\\n            Map<String, Object> filters = (Map<String, Object>)customFieldInstanceService.getCFValue(user, \\\"skills\\\");\\r\\n            if (filters != null) {\\r\\n                for (Map.Entry<String, Object> entry : filters.entrySet()) {\\r\\n                    String key = entry.getKey();\\r\\n                    writer.startNode(\\\"Skill\\\");\\r\\n                    writer.addAttribute(\\\"code\\\", key);\\r\\n                    String value = (String) entry.getValue();\\r\\n                    writer.startNode(\\\"Proficiency\\\");\\r\\n                    writer.setValue(\\\"Proficiency : \\\" + value + \\\"\\/5\\\" );\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Skill\\\");\\r\\n                writer.addAttribute(\\\"code\\\", \\\"\\\");\\r\\n                writer.startNode(\\\"Proficiency\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n            }\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"missions\\\");\\r\\n            List<Mission> missions = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesMission = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"missions\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesMission)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesMission) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n\\r\\n                    Mission mission = new Mission();\\r\\n                    String missionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"missionTitle\\\");\\r\\n                    String oldMissionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"oldMissionTitle\\\");\\r\\n                    String missionDescription = (String) customFieldInstanceService.getCFValue(cei, \\\"missionDescription\\\");\\r\\n                    Date fromDate = (Date) customFieldInstanceService.getCFValue(cei,\\\"fromDate\\\");\\r\\n                    Date toDate = (Date) customFieldInstanceService.getCFValue(cei, \\\"toDate\\\");\\r\\n                    mission.setMissionTitle(missionTitle);\\r\\n                    mission.setOldMissionTitle(oldMissionTitle);\\r\\n                    mission.setMissionDescription(missionDescription);\\r\\n                    mission.setFromDateSort(fromDate);\\r\\n                    mission.setToDateSort(toDate);\\r\\n                    mission.setFromDate(DateUtils.formatDateWithPattern(fromDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                    mission.setToDate(DateUtils.formatDateWithPattern(toDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                    mission.setId(cei.getId());\\r\\n                    missions.add(mission);\\r\\n                }\\r\\n                Collections.sort(missions);\\r\\n                for (Mission mission : missions) {\\r\\n                    writer.startNode(\\\"Mission\\\");\\r\\n                    String missionTitle = mission.getMissionTitle();\\r\\n                    writer.addAttribute(\\\"missionTitle\\\",missionTitle);\\r\\n\\r\\n                    writer.startNode(\\\"oldMissionTitle\\\");\\r\\n                    writer.setValue(mission.getOldMissionTitle());\\r\\n                    writer.endNode();;\\r\\n\\r\\n                    writer.startNode(\\\"missionDescription\\\");\\r\\n                    writer.setValue(mission.getMissionDescription());\\r\\n                    writer.endNode();\\r\\n\\r\\n\\r\\n                    writer.startNode(\\\"period\\\");\\r\\n                    String fromDateSort = mission.getFromDate();\\r\\n                    String toDateSort= mission.getToDate();\\r\\n                    String period = fromDateSort;\\r\\n                    if (!StringUtils.isBlank(toDateSort)) {\\r\\n                        period = period + \\\"-\\\" + toDateSort;\\r\\n                    }\\r\\n                    writer.setValue(period);\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Mission\\\");\\r\\n                writer.addAttribute(\\\"missionTitle\\\", \\\"\\\");\\r\\n\\r\\n                writer.startNode(\\\"oldMissionTitle\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n\\r\\n\\r\\n                writer.startNode(\\\"missionDescription\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n\\r\\n                writer.startNode(\\\"period\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n\\r\\n            }\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"courses\\\");\\r\\n            List<Course> courses = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesCourses = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user,\\\"courses\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesCourses)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesCourses) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n                    Course course = new Course();\\r\\n                    String courseTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"courseTitle\\\");\\r\\n                    String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                    String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                    course.setCourseTitle(courseTitle);\\r\\n                    course.setFromYear(fromYear);\\r\\n                    course.setToYear(toYear);\\r\\n                    courses.add(course);\\r\\n                }\\r\\n                Collections.sort(courses);\\r\\n                for (Course course : courses) {\\r\\n                    writer.startNode(\\\"Course\\\");\\r\\n                    String courseTitle = course.getCourseTitle();\\r\\n                    writer.addAttribute(\\\"courseTitle\\\",courseTitle);\\r\\n\\r\\n                    writer.startNode(\\\"period\\\");\\r\\n                    String fromYear = course.getFromYear();\\r\\n                    String toYear= course.getToYear();\\r\\n                    String period = fromYear;\\r\\n                    if (!StringUtils.isBlank(toYear)) {\\r\\n                        period = period + \\\"-\\\" + toYear;\\r\\n                    }\\r\\n                    writer.setValue(period);\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Course\\\");\\r\\n                writer.addAttribute(\\\"courseTitle\\\",\\\"\\\");\\r\\n\\r\\n                writer.startNode(\\\"period\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n            }\\r\\n\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"educations\\\");\\r\\n            List<Long> educationYears = new ArrayList<>();\\r\\n            List<Education> educations = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesEducations = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"educations\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesEducations)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesEducations) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n                    Education education = new Education();\\r\\n                    String degreeTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"degreeTitle\\\");\\r\\n                    String university = (String) customFieldInstanceService.getCFValue(cei, \\\"university\\\");\\r\\n                    String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                    String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                    education.setDegreeTitle(degreeTitle);\\r\\n                    education.setUniversity(university);\\r\\n                    education.setFromYear(fromYear);\\r\\n                    education.setToYear(toYear);\\r\\n                    educations.add(education);\\r\\n\\r\\n                }\\r\\n                Collections.sort(educations);\\r\\n                for (Education education : educations) {\\r\\n                    writer.startNode(\\\"Education\\\");\\r\\n                    writer.addAttribute(\\\"degreeTitle\\\",education.getDegreeTitle());\\r\\n\\r\\n                    writer.startNode(\\\"university\\\");\\r\\n                    writer.setValue(education.getUniversity());\\r\\n                    writer.endNode();\\r\\n\\r\\n                    writer.startNode(\\\"years\\\");\\r\\n                    String fromYear = education.getFromYear();\\r\\n                    educationYears.add(Long.parseLong(fromYear));\\r\\n                    String toYear = education.getToYear();\\r\\n                    String years = fromYear;\\r\\n                    if (!StringUtils.isBlank(toYear)) {\\r\\n                        years = years + \\\"-\\\" + toYear;\\r\\n                    }\\r\\n                    writer.setValue(years);\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Education\\\");\\r\\n                writer.addAttribute(\\\"degreeTitle\\\",\\\"\\\");\\r\\n                writer.startNode(\\\"university\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n\\r\\n                writer.startNode(\\\"years\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n            }\\r\\n            writer.endNode();\\r\\n            Collections.sort(educationYears);\\r\\n            writer.startNode(\\\"numberOfYears\\\");\\r\\n\\r\\n            if (CollectionUtils.isNotEmpty(educationYears)) {\\r\\n                Integer minEducationYear = educationYears.get(0).intValue();\\r\\n                Integer currentYear = Calendar.getInstance().get(Calendar.YEAR);\\r\\n                writer.setValue(String.valueOf(currentYear - minEducationYear));\\r\\n            } else {\\r\\n                writer.setValue(\\\"\\\");\\r\\n            }\\r\\n            writer.endNode();\\r\\n            \\/\\/ Close root node\\r\\n            writer.endNode();\\r\\n            writer.flush();\\r\\n            writer.close();\\r\\n        } catch (Exception e) {\\r\\n            log.error(\\\"Failed to export data to a file {}\\\", filename, e);\\r\\n            exportStats.setException(e);\\r\\n            throw new BusinessException();\\r\\n\\r\\n        } finally {\\r\\n            if (fileWriter != null) {\\r\\n                try {\\r\\n                    fileWriter.close();\\r\\n                } catch (IOException e) {\\r\\n                    log.error(\\\"Failed to export data to a file {}. Failed to close a writer.\\\", filename, e);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public String generateCV(User user) throws BusinessException {\\r\\n        String meveoDir = param.getChrootDir(meveoPath) + File.separator;\\r\\n        String rootPath = param.getChrootDir(meveoPath) + File.separator + rootProviderDir;\\r\\n        if (!rootPath.endsWith(File.separator)) {\\r\\n            rootPath = rootPath + File.separator;\\r\\n        }\\r\\n\\r\\n        rootPath = rootPath + \\\"exports\\\";\\r\\n        String userXmlFileName = rootPath + File.separator + user.getUserName() + \\\".xml\\\";\\r\\n        String cvDocxFileName = rootPath + File.separator + \\\"Manaty_\\\" + user.getUserName() + \\\"_CV.pdf\\\";\\r\\n        Map<String, Object> parameters = new HashMap<>();\\r\\n\\r\\n        File vppCaseXmlFile = new File(userXmlFileName);\\r\\n        if (!vppCaseXmlFile.exists()) {\\r\\n            throw new BusinessException(\\\"User xml file is missing!\\\");\\r\\n        }\\r\\n\\r\\n        String resDir = meveoDir + \\\"jasper\\\" + File.separator;\\r\\n\\r\\n        try {\\r\\n            String jasperTemplateFile = new StringBuilder(resDir).append(\\\"manaty_cv_pdf.jasper\\\").toString();\\r\\n            File jasperFile = new File(jasperTemplateFile);\\r\\n            if (!jasperFile.exists()) {\\r\\n                throw new BusinessException(\\\"The manaty_cv language not supported.\\\");\\r\\n            }\\r\\n            log.info(String.format(\\\"Jasper template used: %s\\\", jasperFile.getCanonicalPath()));\\r\\n\\r\\n            InputStream reportTemplate = new FileInputStream(jasperFile);\\r\\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\\r\\n            DocumentBuilder db = dbf.newDocumentBuilder();\\r\\n            Document xmlDocument = db.parse(vppCaseXmlFile);\\r\\n            xmlDocument.getDocumentElement().normalize();\\r\\n            Node vppCaseNode = xmlDocument.getElementsByTagName(\\\"User\\\").item(0);\\r\\n\\r\\n            Transformer trans = TransformerFactory.newInstance().newTransformer();\\r\\n            trans.setOutputProperty(OutputKeys.INDENT, \\\"yes\\\");\\r\\n            StringWriter writer = new StringWriter();\\r\\n            trans.transform(new DOMSource(xmlDocument), new StreamResult(writer));\\r\\n            log.debug(writer.getBuffer().toString().replaceAll(\\\"\\\\n|\\\\r\\\", \\\"\\\"));\\r\\n\\r\\n            JRXmlDataSource dataSource = null;\\r\\n            dataSource = new JRXmlDataSource(new ByteArrayInputStream(getNodeXmlString(vppCaseNode).getBytes(StandardCharsets.UTF_8)), \\\"\\/User\\/courses\\/Course\\\");\\r\\n            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(reportTemplate);\\r\\n            parameters.put(\\\"imagePath\\\", resDir);\\r\\n\\r\\n            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, dataSource);\\r\\n\\r\\n            Exporter exporter = new JRPdfExporter();\\r\\n\\r\\n            exporter.setExporterInput(new SimpleExporterInput(jasperPrint));\\r\\n            exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(cvDocxFileName));\\r\\n            exporter.exportReport();\\r\\n\\r\\n            log.info(String.format(\\\"Docx file '%s' produced\\\", cvDocxFileName));\\r\\n\\r\\n        } catch (IOException | JRException | TransformerException | ParserConfigurationException | SAXException e) {\\r\\n            throw new BusinessException(\\\"Failed to generate a Docx file \\\" + cvDocxFileName, e);\\r\\n        }\\r\\n        return cvDocxFileName;\\r\\n    }\\r\\n\\r\\n    public class CountryUtils implements Serializable {\\r\\n        private static final long serialVersionUID = 2633960703470285525L;\\r\\n\\r\\n        Map<String, String> countriesEN = new HashMap<>();\\r\\n        Map<String, String> countriesFR = new HashMap<>();\\r\\n        Map<String, String> countriesIsoEN = new HashMap<>();\\r\\n        Map<String, String> countriesIsoFR = new HashMap<>();\\r\\n\\r\\n        public CountryUtils(){\\r\\n            for (String iso : Locale.getISOCountries()) {\\r\\n                Locale l = new Locale(\\\"\\\",iso);\\r\\n                Locale.setDefault(Locale.US);\\r\\n                countriesEN.put(l.getDisplayCountry().toLowerCase(),iso);\\r\\n                countriesIsoEN.put(iso, l.getDisplayCountry());\\r\\n                Locale.setDefault(Locale.FRANCE);\\r\\n                countriesFR.put(l.getDisplayCountry().toLowerCase(),iso);\\r\\n                countriesIsoFR.put(iso, l.getDisplayCountry());\\r\\n        }\\r\\n            log.info(\\\"countriesIsoEN {}\\\", countriesIsoEN);\\r\\n        }\\r\\n\\r\\n        public String getCountryIsoCode(Locale locale, String countryName) {\\r\\n                    if(!StringUtils.isBlank(countryName)){\\r\\n                        countryName=countryName.toLowerCase();\\r\\n                        if(locale==null || locale.equals(Locale.US)){\\r\\n                            return countriesEN.get(countryName.toLowerCase());\\r\\n                        }else if(locale.equals(Locale.FRANCE)){\\r\\n                        return  countriesFR.get(countryName.toLowerCase());\\r\\n                    }\\r\\n            }\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        public String getCountryName(Locale locale, String isoCode) {\\r\\n            if(!StringUtils.isBlank(isoCode)){\\r\\n                isoCode=isoCode.toUpperCase();\\r\\n                if(locale==null || locale.equals(Locale.US)){\\r\\n                    return countriesIsoEN.get(isoCode);\\r\\n                }else if(locale.equals(Locale.FRANCE)){\\r\\n                    return countriesIsoFR.get(isoCode);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return null;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public CountryUtils getCountryUtils() { return countryUtils; }\\r\\n\\r\\n    public void setCountryUtils(CountryUtils countryUtils) { this.countryUtils = countryUtils; }\\r\\n\\r\\n    public String getMeveoPath() { return meveoPath; }\\r\\n\\r\\n    public void setMeveoPath(String meveoPath) { this.meveoPath = meveoPath; }\\r\\n\\r\\n    public String getRootProviderDir() {\\r\\n        return rootProviderDir;\\r\\n    }\\r\\n\\r\\n    public void setRootProviderDir(String rootProviderDir) {\\r\\n        this.rootProviderDir = rootProviderDir;\\r\\n    }\\r\\n\\r\\n    public ParamBean getParam() { return param; }\\r\\n\\r\\n    public void setParam(ParamBean param) { this.param = param; }\\r\\n\\r\\n    public LinkedHashMap getResponseValues() { return responseValues; }\\r\\n\\r\\n    public void setResponseValues(LinkedHashMap responseValues) { this.responseValues = responseValues; }\\r\\n\\r\\n    public class Education implements Comparable<Education>{\\r\\n        private String degreeTitle;\\r\\n        private String university;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getDegreeTitle() { return degreeTitle; }\\r\\n\\r\\n        public void setDegreeTitle(String degreeTitle) { this.degreeTitle = degreeTitle; }\\r\\n\\r\\n        public String getUniversity() { return university; }\\r\\n\\r\\n        public void setUniversity(String university) { this.university = university; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n\\r\\n        @Override\\r\\n        public int compareTo(Education o) {\\r\\n            if (toYear == null && o.toYear == null) {\\r\\n                return o.fromYear.compareTo(fromYear);\\r\\n            } else if (toYear == null && o.toYear != null) {\\r\\n                return -1;\\r\\n            } else if (toYear != null && o.toYear == null) {\\r\\n                return 1;\\r\\n            } else if (toYear != null && o.toYear != null) {\\r\\n                int ret =  o.toYear.compareTo(toYear);\\r\\n                return ret;\\r\\n            } else {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public class Course implements Comparable<Course> {\\r\\n        private String courseTitle;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getCourseTitle() { return courseTitle; }\\r\\n\\r\\n        public void setCourseTitle(String courseTitle) { this.courseTitle = courseTitle; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n\\r\\n        @Override\\r\\n        public int compareTo(Course o) {\\r\\n            if (toYear == null && o.toYear == null) {\\r\\n                return o.fromYear.compareTo(fromYear);\\r\\n            } else if (toYear == null && o.toYear != null) {\\r\\n                return -1;\\r\\n            } else if (toYear != null && o.toYear == null) {\\r\\n                return 1;\\r\\n            } else if (toYear != null && o.toYear != null) {\\r\\n                int ret = o.toYear.compareTo(toYear);\\r\\n                return ret;\\r\\n            } else {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public class Mission implements Comparable<Mission>{\\r\\n        private String missionTitle;\\r\\n        private String oldMissionTitle;\\r\\n        private String missionDescription;\\r\\n        private String fromDate;\\r\\n        private String toDate;\\r\\n        private Date fromDateSort;\\r\\n        private Date toDateSort;\\r\\n        private Long id;\\r\\n\\r\\n        public String getMissionTitle() { return missionTitle; }\\r\\n\\r\\n        public void setMissionTitle(String missionTitle) { this.missionTitle = missionTitle; }\\r\\n\\r\\n        public String getOldMissionTitle() { return oldMissionTitle; }\\r\\n\\r\\n        public void setOldMissionTitle(String oldMissionTitle) { this.oldMissionTitle = oldMissionTitle; }\\r\\n\\r\\n        public String getMissionDescription() { return missionDescription; }\\r\\n\\r\\n        public void setMissionDescription(String missionDescription) { this.missionDescription = missionDescription; }\\r\\n\\r\\n        public String getFromDate() { return fromDate; }\\r\\n\\r\\n        public void setFromDate(String fromDate) { this.fromDate = fromDate; }\\r\\n\\r\\n        public String getToDate() { return toDate; }\\r\\n\\r\\n        public void setToDate(String toDate) { this.toDate = toDate; }\\r\\n\\r\\n        public Long getId() { return id; }\\r\\n\\r\\n        public void setId(Long id) { this.id = id; }\\r\\n\\r\\n        public Date getFromDateSort() {\\r\\n            return fromDateSort;\\r\\n        }\\r\\n\\r\\n        public void setFromDateSort(Date fromDateSort) {\\r\\n            this.fromDateSort = fromDateSort;\\r\\n        }\\r\\n\\r\\n        public Date getToDateSort() {\\r\\n            return toDateSort;\\r\\n        }\\r\\n\\r\\n        public void setToDateSort(Date toDateSort) {\\r\\n            this.toDateSort = toDateSort;\\r\\n        }\\r\\n\\r\\n        @Override\\r\\n        public int compareTo(Mission o) {\\r\\n            if (toDateSort == null && o.toDateSort == null) {\\r\\n                return o.fromDateSort.compareTo(fromDateSort);\\r\\n            } else if (toDateSort == null && o.toDateSort != null) {\\r\\n                return -1;\\r\\n            } else if (toDateSort != null && o.toDateSort == null) {\\r\\n                return 1;\\r\\n            } else if (toDateSort != null && o.toDateSort != null) {\\r\\n                int ret = o.toDateSort.compareTo(toDateSort);\\r\\n                return ret;\\r\\n            } else {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GenerateCVExport script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.GenerateCVExportScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport com.thoughtworks.xstream.core.util.QuickWriter;\\r\\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\\r\\nimport com.thoughtworks.xstream.io.naming.NameCoder;\\r\\nimport com.thoughtworks.xstream.io.xml.PrettyPrintWriter;\\r\\nimport net.sf.jasperreports.engine.JRException;\\r\\nimport net.sf.jasperreports.engine.JasperFillManager;\\r\\nimport net.sf.jasperreports.engine.JasperPrint;\\r\\nimport net.sf.jasperreports.engine.JasperReport;\\r\\nimport net.sf.jasperreports.engine.data.JRXmlDataSource;\\r\\nimport net.sf.jasperreports.engine.export.ooxml.JRDocxExporter;\\r\\nimport net.sf.jasperreports.engine.util.JRLoader;\\r\\nimport net.sf.jasperreports.export.Exporter;\\r\\nimport net.sf.jasperreports.export.SimpleExporterInput;\\r\\nimport net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.apache.commons.io.FileUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.exceptions.ConfigurationException;\\r\\nimport org.meveo.commons.utils.ParamBean;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.commons.utils.XStreamCDATAConverter;\\r\\nimport org.meveo.export.ExportImportStatistics;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\nimport org.w3c.dom.Document;\\r\\nimport org.w3c.dom.Node;\\r\\nimport org.xml.sax.SAXException;\\r\\n\\r\\n\\r\\nimport javax.annotation.PostConstruct;\\r\\nimport javax.xml.parsers.DocumentBuilder;\\r\\nimport javax.xml.parsers.DocumentBuilderFactory;\\r\\nimport javax.xml.parsers.ParserConfigurationException;\\r\\nimport javax.xml.transform.OutputKeys;\\r\\nimport javax.xml.transform.Transformer;\\r\\nimport javax.xml.transform.TransformerException;\\r\\nimport javax.xml.transform.TransformerFactory;\\r\\nimport javax.xml.transform.dom.DOMSource;\\r\\nimport javax.xml.transform.stream.StreamResult;\\r\\nimport java.io.*;\\r\\nimport java.nio.charset.StandardCharsets;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class GenerateCVExportScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(GenerateCVExportScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private CountryUtils countryUtils;\\r\\n    private String username;\\r\\n    private String meveoPath = null;\\r\\n    private String rootProviderDir = null;\\r\\n    private ParamBean param = ParamBean.getInstance();\\r\\n    private LinkedHashMap responseValues = new LinkedHashMap();\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        generateXML(user);\\r\\n        String fileName = generateCV(user);\\r\\n        File file = new File(fileName);\\r\\n        try {\\r\\n            responseValues.put(\\\"fileName\\\", file.getName());\\r\\n            byte[] fileBytes = new byte[(int) file.length()];\\r\\n            FileInputStream fileInputStream = new FileInputStream(file);\\r\\n            fileInputStream.read(fileBytes);\\r\\n            responseValues.put(\\\"document\\\", Base64.getEncoder().encodeToString(fileBytes));\\r\\n        } catch (Exception ex) {\\r\\n            responseValues.put(\\\"fileName\\\", \\\"\\\");\\r\\n            responseValues.put(\\\"document\\\", \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n        meveoPath = ParamBean.getInstance().getProperty(\\\"providers.rootDir\\\", \\\"\\/opt\\/wildfly\\/opencelldata\\/\\\");\\r\\n        rootProviderDir = ParamBean.getInstance().getProperty(\\\"provider.rootDir\\\", \\\"manaty\\\");\\r\\n        countryUtils = new CountryUtils();\\r\\n    }\\r\\n\\r\\n    private class EntityExportWriter extends PrettyPrintWriter {\\r\\n\\r\\n        private boolean attributeClassAdded = false;\\r\\n\\r\\n        public EntityExportWriter(Writer out) { super(out); }\\r\\n        public EntityExportWriter(Writer out, NameCoder nameCoder) { super(out, nameCoder); }\\r\\n\\r\\n        @Override\\r\\n        public void addAttribute(String key, String value) {\\r\\n            if (key.equals(\\\"class\\\")) {\\r\\n                if (attributeClassAdded) {\\r\\n                    return;\\r\\n                }\\r\\n                attributeClassAdded = true;\\r\\n            }\\r\\n            super.addAttribute(key, value);\\r\\n        }\\r\\n\\r\\n        @Override\\r\\n        protected void writeText(QuickWriter writer, String text) {\\r\\n            if (text == null) {\\r\\n                writer.write(\\\"\\\");\\r\\n            } else if (text.indexOf(XStreamCDATAConverter.CDATA_START) >= 0 && text.indexOf(XStreamCDATAConverter.CDATA_END) > 0) {\\r\\n                writer.write(text);\\r\\n            } else {\\r\\n                super.writeText(writer, text);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        @Override\\r\\n        public void endNode() {\\r\\n            super.endNode();\\r\\n            attributeClassAdded = false;\\r\\n        }\\r\\n    }\\r\\n    private String getNodeXmlString(Node node) {\\r\\n        try {\\r\\n            TransformerFactory transFactory = TransformerFactory.newInstance();\\r\\n            Transformer transformer = transFactory.newTransformer();\\r\\n            StringWriter buffer = new StringWriter();\\r\\n            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \\\"yes\\\");\\r\\n            transformer.transform(new DOMSource(node), new StreamResult(buffer));\\r\\n            return buffer.toString();\\r\\n        } catch (Exception e) {\\r\\n            log.error(\\\"Error converting xml node to its string representation. {}\\\", e);\\r\\n            throw new ConfigurationException();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public void generateXML(User user) throws BusinessException {\\r\\n        ExportImportStatistics exportStats = new ExportImportStatistics();\\r\\n\\r\\n        String shortFilename = user.getUserName();\\r\\n\\r\\n        String path = param.getChrootDir(meveoPath) + File.separator + rootProviderDir;\\r\\n        if (!path.endsWith(File.separator)) {\\r\\n            path = path + File.separator;\\r\\n        }\\r\\n        path = path + \\\"exports\\\";\\r\\n        String filename = path + File.separator + shortFilename + \\\".xml\\\";\\r\\n        Writer fileWriter = null;\\r\\n        try {\\r\\n            log.info(\\\"Exporting data to a file {}\\\", filename);\\r\\n            FileUtils.forceMkdir(new File(path));\\r\\n\\r\\n            fileWriter = new FileWriter(filename);\\r\\n\\r\\n            HierarchicalStreamWriter writer = new EntityExportWriter(fileWriter);\\r\\n\\r\\n            \\/\\/ Open root node\\r\\n            writer.startNode(\\\"User\\\");\\r\\n            writer.addAttribute(\\\"userName\\\", shortFilename);\\r\\n            String fullName = \\\"\\\";\\r\\n            if (user.getName() != null) {\\r\\n                if (!org.meveo.commons.utils.StringUtils.isBlank(user.getName().getFirstName()) && !org.meveo.commons.utils.StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                    fullName = user.getName().getFirstName() + \\\" \\\" + user.getName().getLastName();\\r\\n                } else if (org.meveo.commons.utils.StringUtils.isBlank(user.getName().getFirstName()) && !org.meveo.commons.utils.StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                    fullName = user.getName().getLastName();\\r\\n                } else if (!org.meveo.commons.utils.StringUtils.isBlank(user.getName().getFirstName()) && StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                    fullName = user.getName().getFirstName();\\r\\n                }\\r\\n            }\\r\\n            writer.startNode(\\\"fullName\\\");\\r\\n            writer.setValue(fullName);\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"country\\\");\\r\\n            String countryCode = (String) customFieldInstanceService.getCFValue(user,\\\"country\\\");\\r\\n            writer.setValue(countryUtils.getCountryName(Locale.US, countryCode));\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"job\\\");\\r\\n            String job = (String) customFieldInstanceService.getCFValue(user, \\\"job\\\");\\r\\n            writer.setValue(job);\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"skills\\\");\\r\\n            Map<String, Object> filters = (Map<String, Object>)customFieldInstanceService.getCFValue(user, \\\"skills\\\");\\r\\n            if (filters != null) {\\r\\n                for (Map.Entry<String, Object> entry : filters.entrySet()) {\\r\\n                    String key = entry.getKey();\\r\\n                    writer.startNode(\\\"Skill\\\");\\r\\n                    writer.addAttribute(\\\"code\\\", key);\\r\\n                    String value = (String) entry.getValue();\\r\\n                    writer.startNode(\\\"Proficiency\\\");\\r\\n                    writer.setValue(\\\"Proficiency : \\\" + value + \\\"\\/5\\\" );\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Skill\\\");\\r\\n                writer.addAttribute(\\\"code\\\", \\\"\\\");\\r\\n                writer.startNode(\\\"Proficiency\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n            }\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"missions\\\");\\r\\n            List<Mission> missions = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesMission = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"missions\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesMission)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesMission) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n\\r\\n                    Mission mission = new Mission();\\r\\n                    String missionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"missionTitle\\\");\\r\\n                    String oldMissionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"oldMissionTitle\\\");\\r\\n                    String missionDescription = (String) customFieldInstanceService.getCFValue(cei, \\\"missionDescription\\\");\\r\\n                    Date fromDate = (Date) customFieldInstanceService.getCFValue(cei,\\\"fromDate\\\");\\r\\n                    Date toDate = (Date) customFieldInstanceService.getCFValue(cei, \\\"toDate\\\");\\r\\n                    mission.setMissionTitle(missionTitle);\\r\\n                    mission.setOldMissionTitle(oldMissionTitle);\\r\\n                    mission.setMissionDescription(missionDescription);\\r\\n                    mission.setFromDateSort(fromDate);\\r\\n                    mission.setToDateSort(toDate);\\r\\n                    mission.setFromDate(DateUtils.formatDateWithPattern(fromDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                    mission.setToDate(DateUtils.formatDateWithPattern(toDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                    mission.setId(cei.getId());\\r\\n                    missions.add(mission);\\r\\n                }\\r\\n                Collections.sort(missions);\\r\\n                for (Mission mission : missions) {\\r\\n                    writer.startNode(\\\"Mission\\\");\\r\\n                    String missionTitle = mission.getMissionTitle();\\r\\n                    writer.addAttribute(\\\"missionTitle\\\",missionTitle);\\r\\n\\r\\n                    writer.startNode(\\\"oldMissionTitle\\\");\\r\\n                    writer.setValue(mission.getOldMissionTitle());\\r\\n                    writer.endNode();;\\r\\n\\r\\n                    writer.startNode(\\\"missionDescription\\\");\\r\\n                    writer.setValue(mission.getMissionDescription());\\r\\n                    writer.endNode();\\r\\n\\r\\n\\r\\n                    writer.startNode(\\\"period\\\");\\r\\n                    String fromDateSort = mission.getFromDate();\\r\\n                    String toDateSort= mission.getToDate();\\r\\n                    String period = fromDateSort;\\r\\n                    if (!StringUtils.isBlank(toDateSort)) {\\r\\n                        period = period + \\\"-\\\" + toDateSort;\\r\\n                    }\\r\\n                    writer.setValue(period);\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Mission\\\");\\r\\n                writer.addAttribute(\\\"missionTitle\\\", \\\"\\\");\\r\\n\\r\\n                writer.startNode(\\\"oldMissionTitle\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n\\r\\n\\r\\n                writer.startNode(\\\"missionDescription\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n\\r\\n                writer.startNode(\\\"period\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n\\r\\n            }\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"courses\\\");\\r\\n            List<Course> courses = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesCourses = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user,\\\"courses\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesCourses)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesCourses) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n\\r\\n                    Course course = new Course();\\r\\n                    String courseTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"courseTitle\\\");\\r\\n                    String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                    String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                    course.setCourseTitle(courseTitle);\\r\\n                    course.setFromYear(fromYear);\\r\\n                    course.setToYear(toYear);\\r\\n                    courses.add(course);\\r\\n                }\\r\\n                Collections.sort(courses);\\r\\n                for (Course course : courses) {\\r\\n                    writer.startNode(\\\"Course\\\");\\r\\n                    String courseTitle = course.getCourseTitle();\\r\\n                    writer.addAttribute(\\\"courseTitle\\\",courseTitle);\\r\\n\\r\\n                    writer.startNode(\\\"period\\\");\\r\\n                    String fromYear = course.getFromYear();\\r\\n                    String toYear= course.getToYear();\\r\\n                    String period = fromYear;\\r\\n                    if (!StringUtils.isBlank(toYear)) {\\r\\n                        period = period + \\\"-\\\" + toYear;\\r\\n                    }\\r\\n                    writer.setValue(period);\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Course\\\");\\r\\n                writer.addAttribute(\\\"courseTitle\\\",\\\"\\\");\\r\\n\\r\\n                writer.startNode(\\\"period\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n            }\\r\\n\\r\\n            writer.endNode();\\r\\n\\r\\n            writer.startNode(\\\"educations\\\");\\r\\n            List<Long> educationYears = new ArrayList<>();\\r\\n            List<Education> educations = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesEducations = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"educations\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesEducations)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesEducations) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n                    Education education = new Education();\\r\\n                    String degreeTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"degreeTitle\\\");\\r\\n                    String university = (String) customFieldInstanceService.getCFValue(cei, \\\"university\\\");\\r\\n                    String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                    String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                    education.setDegreeTitle(degreeTitle);\\r\\n                    education.setUniversity(university);\\r\\n                    education.setFromYear(fromYear);\\r\\n                    education.setToYear(toYear);\\r\\n                    educations.add(education);\\r\\n\\r\\n                }\\r\\n                Collections.sort(educations);\\r\\n                for (Education education : educations) {\\r\\n                    writer.startNode(\\\"Education\\\");\\r\\n                    writer.addAttribute(\\\"degreeTitle\\\",education.getDegreeTitle());\\r\\n\\r\\n                    writer.startNode(\\\"university\\\");\\r\\n                    writer.setValue(education.getUniversity());\\r\\n                    writer.endNode();\\r\\n\\r\\n                    writer.startNode(\\\"years\\\");\\r\\n                    String fromYear = education.getFromYear();\\r\\n                    educationYears.add(Long.parseLong(fromYear));\\r\\n                    String toYear = education.getToYear();\\r\\n                    String years = fromYear;\\r\\n                    if (!StringUtils.isBlank(toYear)) {\\r\\n                        years = years + \\\"-\\\" + toYear;\\r\\n                    }\\r\\n                    writer.setValue(years);\\r\\n                    writer.endNode();\\r\\n                    writer.endNode();\\r\\n                }\\r\\n            } else {\\r\\n                writer.startNode(\\\"Education\\\");\\r\\n                writer.addAttribute(\\\"degreeTitle\\\",\\\"\\\");\\r\\n                writer.startNode(\\\"university\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n\\r\\n                writer.startNode(\\\"years\\\");\\r\\n                writer.setValue(\\\"\\\");\\r\\n                writer.endNode();\\r\\n                writer.endNode();\\r\\n            }\\r\\n            writer.endNode();\\r\\n            Collections.sort(educationYears);\\r\\n            writer.startNode(\\\"numberOfYears\\\");\\r\\n\\r\\n            if (CollectionUtils.isNotEmpty(educationYears)) {\\r\\n                Integer minEducationYear = educationYears.get(0).intValue();\\r\\n                Integer currentYear = Calendar.getInstance().get(Calendar.YEAR);\\r\\n                writer.setValue(String.valueOf(currentYear - minEducationYear));\\r\\n            } else {\\r\\n                writer.setValue(\\\"\\\");\\r\\n            }\\r\\n            writer.endNode();\\r\\n            \\/\\/ Close root node\\r\\n            writer.endNode();\\r\\n            writer.flush();\\r\\n            writer.close();\\r\\n        } catch (Exception e) {\\r\\n            log.error(\\\"Failed to export data to a file {}\\\", filename, e);\\r\\n            exportStats.setException(e);\\r\\n            throw new BusinessException();\\r\\n\\r\\n        } finally {\\r\\n            if (fileWriter != null) {\\r\\n                try {\\r\\n                    fileWriter.close();\\r\\n                } catch (IOException e) {\\r\\n                    log.error(\\\"Failed to export data to a file {}. Failed to close a writer.\\\", filename, e);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public String generateCV(User user) throws BusinessException {\\r\\n        String meveoDir = param.getChrootDir(meveoPath) + File.separator;\\r\\n        String rootPath = param.getChrootDir(meveoPath) + File.separator + rootProviderDir;\\r\\n        if (!rootPath.endsWith(File.separator)) {\\r\\n            rootPath = rootPath + File.separator;\\r\\n        }\\r\\n\\r\\n        rootPath = rootPath + \\\"exports\\\";\\r\\n        String userXmlFileName = rootPath + File.separator + user.getUserName() + \\\".xml\\\";\\r\\n        String cvDocxFileName = rootPath + File.separator + \\\"Manaty_\\\" + user.getUserName() + \\\"_CV.docx\\\";\\r\\n        Map<String, Object> parameters = new HashMap<>();\\r\\n\\r\\n        File vppCaseXmlFile = new File(userXmlFileName);\\r\\n        if (!vppCaseXmlFile.exists()) {\\r\\n            throw new BusinessException(\\\"User xml file is missing!\\\");\\r\\n        }\\r\\n\\r\\n        String resDir = meveoDir + \\\"jasper\\\" + File.separator;\\r\\n\\r\\n        try {\\r\\n            String jasperTemplateFile = new StringBuilder(resDir).append(\\\"manaty_cv_doc.jasper\\\").toString();\\r\\n            File jasperFile = new File(jasperTemplateFile);\\r\\n            if (!jasperFile.exists()) {\\r\\n                throw new BusinessException(\\\"The manaty_cv language not supported.\\\");\\r\\n            }\\r\\n            log.info(String.format(\\\"Jasper template used: %s\\\", jasperFile.getCanonicalPath()));\\r\\n\\r\\n            InputStream reportTemplate = new FileInputStream(jasperFile);\\r\\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\\r\\n            DocumentBuilder db = dbf.newDocumentBuilder();\\r\\n            Document xmlDocument = db.parse(vppCaseXmlFile);\\r\\n            xmlDocument.getDocumentElement().normalize();\\r\\n            Node vppCaseNode = xmlDocument.getElementsByTagName(\\\"User\\\").item(0);\\r\\n\\r\\n            Transformer trans = TransformerFactory.newInstance().newTransformer();\\r\\n            trans.setOutputProperty(OutputKeys.INDENT, \\\"yes\\\");\\r\\n            StringWriter writer = new StringWriter();\\r\\n            trans.transform(new DOMSource(xmlDocument), new StreamResult(writer));\\r\\n            log.debug(writer.getBuffer().toString().replaceAll(\\\"\\\\n|\\\\r\\\", \\\"\\\"));\\r\\n\\r\\n            JRXmlDataSource dataSource = null;\\r\\n            dataSource = new JRXmlDataSource(new ByteArrayInputStream(getNodeXmlString(vppCaseNode).getBytes(StandardCharsets.UTF_8)), \\\"\\/User\\/courses\\/Course\\\");\\r\\n            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(reportTemplate);\\r\\n            parameters.put(\\\"imagePath\\\", resDir);\\r\\n\\r\\n            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, dataSource);\\r\\n\\r\\n            Exporter exporter = new JRDocxExporter();\\r\\n\\r\\n            exporter.setExporterInput(new SimpleExporterInput(jasperPrint));\\r\\n            exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(cvDocxFileName));\\r\\n            exporter.exportReport();\\r\\n\\r\\n            log.info(String.format(\\\"Docx file '%s' produced\\\", cvDocxFileName));\\r\\n\\r\\n        } catch (IOException | JRException | TransformerException | ParserConfigurationException | SAXException e) {\\r\\n            throw new BusinessException(\\\"Failed to generate a Docx file \\\" + cvDocxFileName, e);\\r\\n        }\\r\\n        return cvDocxFileName;\\r\\n    }\\r\\n\\r\\n    public class CountryUtils implements Serializable {\\r\\n        private static final long serialVersionUID = 2633960703470285525L;\\r\\n\\r\\n        Map<String, String> countriesEN = new HashMap<>();\\r\\n        Map<String, String> countriesFR = new HashMap<>();\\r\\n        Map<String, String> countriesIsoEN = new HashMap<>();\\r\\n        Map<String, String> countriesIsoFR = new HashMap<>();\\r\\n\\r\\n        public CountryUtils(){\\r\\n            for (String iso : Locale.getISOCountries()) {\\r\\n                Locale l = new Locale(\\\"\\\",iso);\\r\\n                Locale.setDefault(Locale.US);\\r\\n                countriesEN.put(l.getDisplayCountry().toLowerCase(),iso);\\r\\n                countriesIsoEN.put(iso, l.getDisplayCountry());\\r\\n                Locale.setDefault(Locale.FRANCE);\\r\\n                countriesFR.put(l.getDisplayCountry().toLowerCase(),iso);\\r\\n                countriesIsoFR.put(iso, l.getDisplayCountry());\\r\\n            }\\r\\n            log.info(\\\"countriesIsoEN {}\\\", countriesIsoEN);\\r\\n        }\\r\\n\\r\\n        public String getCountryIsoCode(Locale locale, String countryName) {\\r\\n            if(!StringUtils.isBlank(countryName)){\\r\\n                countryName=countryName.toLowerCase();\\r\\n                if(locale==null || locale.equals(Locale.US)){\\r\\n                    return countriesEN.get(countryName.toLowerCase());\\r\\n                }else if(locale.equals(Locale.FRANCE)){\\r\\n                    return  countriesFR.get(countryName.toLowerCase());\\r\\n                }\\r\\n            }\\r\\n            return null;\\r\\n        }\\r\\n\\r\\n        public String getCountryName(Locale locale, String isoCode) {\\r\\n            if(!StringUtils.isBlank(isoCode)){\\r\\n                isoCode=isoCode.toUpperCase();\\r\\n                if(locale==null || locale.equals(Locale.US)){\\r\\n                    return countriesIsoEN.get(isoCode);\\r\\n                }else if(locale.equals(Locale.FRANCE)){\\r\\n                    return countriesIsoFR.get(isoCode);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return null;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public CountryUtils getCountryUtils() { return countryUtils; }\\r\\n\\r\\n    public void setCountryUtils(CountryUtils countryUtils) { this.countryUtils = countryUtils; }\\r\\n\\r\\n    public String getMeveoPath() { return meveoPath; }\\r\\n\\r\\n    public void setMeveoPath(String meveoPath) { this.meveoPath = meveoPath; }\\r\\n\\r\\n    public String getRootProviderDir() {\\r\\n        return rootProviderDir;\\r\\n    }\\r\\n\\r\\n    public void setRootProviderDir(String rootProviderDir) {\\r\\n        this.rootProviderDir = rootProviderDir;\\r\\n    }\\r\\n\\r\\n    public ParamBean getParam() { return param; }\\r\\n\\r\\n    public void setParam(ParamBean param) { this.param = param; }\\r\\n\\r\\n    public LinkedHashMap getResponseValues() { return responseValues; }\\r\\n\\r\\n    public void setResponseValues(LinkedHashMap responseValues) { this.responseValues = responseValues; }\\r\\n\\r\\n    public class Education implements Comparable<Education>{\\r\\n        private String degreeTitle;\\r\\n        private String university;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getDegreeTitle() { return degreeTitle; }\\r\\n\\r\\n        public void setDegreeTitle(String degreeTitle) { this.degreeTitle = degreeTitle; }\\r\\n\\r\\n        public String getUniversity() { return university; }\\r\\n\\r\\n        public void setUniversity(String university) { this.university = university; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n\\r\\n        @Override\\r\\n        public int compareTo(Education o) {\\r\\n            if (toYear == null && o.toYear == null) {\\r\\n                return o.fromYear.compareTo(fromYear);\\r\\n            } else if (toYear == null && o.toYear != null) {\\r\\n                return -1;\\r\\n            } else if (toYear != null && o.toYear == null) {\\r\\n                return 1;\\r\\n            } else if (toYear != null && o.toYear != null) {\\r\\n                int ret =  o.toYear.compareTo(toYear);\\r\\n                return ret;\\r\\n            } else {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public class Course implements Comparable<Course> {\\r\\n        private String courseTitle;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getCourseTitle() { return courseTitle; }\\r\\n\\r\\n        public void setCourseTitle(String courseTitle) { this.courseTitle = courseTitle; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n\\r\\n        @Override\\r\\n        public int compareTo(Course o) {\\r\\n            if (toYear == null && o.toYear == null) {\\r\\n                return o.fromYear.compareTo(fromYear);\\r\\n            } else if (toYear == null && o.toYear != null) {\\r\\n                return -1;\\r\\n            } else if (toYear != null && o.toYear == null) {\\r\\n                return 1;\\r\\n            } else if (toYear != null && o.toYear != null) {\\r\\n                int ret = o.toYear.compareTo(toYear);\\r\\n                return ret;\\r\\n            } else {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public class Mission implements Comparable<Mission>{\\r\\n        private String missionTitle;\\r\\n        private String oldMissionTitle;\\r\\n        private String missionDescription;\\r\\n        private String fromDate;\\r\\n        private String toDate;\\r\\n        private Date fromDateSort;\\r\\n        private Date toDateSort;\\r\\n        private Long id;\\r\\n\\r\\n        public String getMissionTitle() { return missionTitle; }\\r\\n\\r\\n        public void setMissionTitle(String missionTitle) { this.missionTitle = missionTitle; }\\r\\n\\r\\n        public String getOldMissionTitle() { return oldMissionTitle; }\\r\\n\\r\\n        public void setOldMissionTitle(String oldMissionTitle) { this.oldMissionTitle = oldMissionTitle; }\\r\\n\\r\\n        public String getMissionDescription() { return missionDescription; }\\r\\n\\r\\n        public void setMissionDescription(String missionDescription) { this.missionDescription = missionDescription; }\\r\\n\\r\\n        public String getFromDate() { return fromDate; }\\r\\n\\r\\n        public void setFromDate(String fromDate) { this.fromDate = fromDate; }\\r\\n\\r\\n        public String getToDate() { return toDate; }\\r\\n\\r\\n        public void setToDate(String toDate) { this.toDate = toDate; }\\r\\n\\r\\n        public Long getId() { return id; }\\r\\n\\r\\n        public void setId(Long id) { this.id = id; }\\r\\n\\r\\n        public Date getFromDateSort() {\\r\\n            return fromDateSort;\\r\\n        }\\r\\n\\r\\n        public void setFromDateSort(Date fromDateSort) {\\r\\n            this.fromDateSort = fromDateSort;\\r\\n        }\\r\\n\\r\\n        public Date getToDateSort() {\\r\\n            return toDateSort;\\r\\n        }\\r\\n\\r\\n        public void setToDateSort(Date toDateSort) {\\r\\n            this.toDateSort = toDateSort;\\r\\n        }\\r\\n\\r\\n        @Override\\r\\n        public int compareTo(Mission o) {\\r\\n            if (toDateSort == null && o.toDateSort == null) {\\r\\n                return o.fromDateSort.compareTo(fromDateSort);\\r\\n            } else if (toDateSort == null && o.toDateSort != null) {\\r\\n                return -1;\\r\\n            } else if (toDateSort != null && o.toDateSort == null) {\\r\\n                return 1;\\r\\n            } else if (toDateSort != null && o.toDateSort != null) {\\r\\n                int ret = o.toDateSort.compareTo(toDateSort);\\r\\n                return ret;\\r\\n            } else {\\r\\n                return 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveProjectAssembla script ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveProjectAssemblaScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveProjectAssemblaScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveProjectAssemblaScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String code;\\r\\n    private String assemblaLink;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        CustomEntityInstance project = customEntityInstanceService.findByCodeByCet(\\\"ProjectUser\\\", getCode());\\r\\n          if (project != null)\\r\\n             if (getAssemblaLink() != null) {\\r\\n            customFieldInstanceService.setCFValue(project, \\\"assemblaLink\\\", getAssemblaLink());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    public String getCode() { return code; }\\r\\n\\r\\n    public void setCode(String code) { this.code = code; }\\r\\n\\r\\n    public String getAssemblaLink() { return assemblaLink; }\\r\\n\\r\\n    public void setAssemblaLink(String assemblaLink) { this.assemblaLink = assemblaLink; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserBio script  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveUserBioScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveUserBioScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveUserBioScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private String bio;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            customFieldInstanceService.setCFValue(user, \\\"bio\\\", getBio());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public String getBio() { return bio; }\\r\\n\\r\\n    public void setBio(String bio) { this.bio = bio; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create UpdateImage script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.UpdateImageScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class UpdateImageScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(UpdateImageScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private String photo;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            if (!StringUtils.isBlank(getPhoto())) {\\r\\n                customFieldInstanceService.setCFValue(user,\\\"photo\\\", getPhoto());\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public String getPhoto() { return photo; }\\r\\n\\r\\n    public void setPhoto(String photo) { this.photo = photo; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GetUsers script  ",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "meveo",
									"type": "string"
								},
								{
									"key": "username",
									"value": "meveo.admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.GetUsersScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.api.exception.BusinessApiException;\\r\\nimport org.meveo.commons.utils.ParamBean;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.io.File;\\r\\nimport java.io.FileInputStream;\\r\\nimport java.io.IOException;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class GetUsersScript extends Script {\\r\\n\\tprivate static final Logger log = LoggerFactory.getLogger(GetUsersScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private Map<String, Object> responseMap = new HashMap<>();\\r\\n    private  List<User> users;\\r\\n\\r\\n    private String getPhoto(String fileName) throws BusinessApiException {\\r\\n        String meveoPath = ParamBean.getInstance().getProperty(\\\"providers.rootDir\\\", \\\"\\/opt\\/wildfly\\/opencelldata\\/\\\");\\r\\n        String rootProviderDir = ParamBean.getInstance().getProperty(\\\"provider.rootDir\\\", \\\"manaty\\\");;\\r\\n        File file = new File(meveoPath + File.separator + rootProviderDir + File.separator + fileName);\\r\\n\\r\\n        if (!file.exists()) {\\r\\n            throw new BusinessApiException(\\\"File does not exists: \\\" + file.getPath());\\r\\n        }\\r\\n        try {\\r\\n            FileInputStream fis = new FileInputStream(file);\\r\\n            byte[] bytes = new byte[(int)file.length()];\\r\\n            fis.read(bytes);\\r\\n            return Base64.getEncoder().encodeToString(bytes);\\r\\n        } catch (IOException e) {\\r\\n            throw new BusinessApiException(\\\"Error zipping file: \\\" + file.getName() + \\\". \\\" + e.getMessage());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n\\tpublic void execute(Map<String, Object> context) throws BusinessException {\\r\\n\\t\\tlog.info(\\\"Execute...\\\");\\r\\n        List<UserResponseDto> userResponseDtos = new ArrayList<>();\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        List<User> users = userService.listActive();\\r\\n        if (CollectionUtils.isNotEmpty(users)){\\r\\n            for (User user : users) {\\r\\n                log.info(\\\"User...{}\\\", user.getUserName());\\r\\n                UserResponseDto userResponseDto = new UserResponseDto();\\r\\n                userResponseDto.setFirstName(user.getName() != null ? user.getName().getFirstName() != null ? user.getName().getFirstName() : \\\"\\\" : \\\"\\\");\\r\\n                userResponseDto.setLastName( user.getName() !=null ? user.getName().getLastName() != null ? user.getName().getLastName() : \\\"\\\"  :\\\"\\\");\\r\\n                userResponseDto.setName(!StringUtils.isBlank(userResponseDto.getFirstName()) ? userResponseDto.getFirstName() + \\\" \\\" : \\\"\\\"  + userResponseDto.getLastName());\\r\\n                userResponseDto.setUsername(user.getUserName());\\r\\n                userResponseDto.setEmail(user.getEmail());\\r\\n\\r\\n                String skypeId = (String) customFieldInstanceService.getCFValue(user,\\\"skypeId\\\");\\r\\n                Date sinceDate = (Date) customFieldInstanceService.getCFValue(user,\\\"sinceDate\\\");\\r\\n                String photo = (String) customFieldInstanceService.getCFValue(user, \\\"photo\\\");\\r\\n                String job = (String) customFieldInstanceService.getCFValue(user,\\\"job\\\");\\r\\n                String country = (String) customFieldInstanceService.getCFValue(user, \\\"country\\\");\\r\\n                String linkedin = (String) customFieldInstanceService.getCFValue(user, \\\"linkedin\\\");\\r\\n                String bio = (String) customFieldInstanceService.getCFValue(user, \\\"bio\\\");\\r\\n                if (skypeId == null) {\\r\\n                    skypeId = \\\"\\\";\\r\\n                }\\r\\n                if (photo == null) {\\r\\n                    photo = \\\"\\\";\\r\\n                }\\r\\n                if (job == null) {\\r\\n                    job = \\\"\\\";\\r\\n                }\\r\\n                if (country == null) {\\r\\n                    country = \\\"\\\";\\r\\n                }\\r\\n                if (linkedin == null) {\\r\\n                    linkedin = \\\"\\\";\\r\\n                }\\r\\n                if (bio == null) {\\r\\n                    bio = \\\"\\\";\\r\\n                }\\r\\n                if (!StringUtils.isBlank(photo)){\\r\\n                    try {\\r\\n                        userResponseDto.setPhotoBase64(getPhoto(photo));\\r\\n                    } catch (BusinessApiException e) {\\r\\n\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                userResponseDto.setSkypeId(skypeId);\\r\\n                userResponseDto.setSinceDate(DateUtils.formatDateWithPattern(sinceDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                userResponseDto.setPhoto(photo);\\r\\n                userResponseDto.setJob(job);\\r\\n                userResponseDto.setCountry(country);\\r\\n                userResponseDto.setLinkedin(linkedin);\\r\\n                userResponseDto.setBio(bio);\\r\\n                List<Skill> skills = new ArrayList<>();\\r\\n                Map<String, String> skillMap = (Map<String, String>)customFieldInstanceService.getCFValue(user,\\\"skills\\\");\\r\\n                if (skillMap != null) {\\r\\n                    for (Map.Entry<String, String> entry : skillMap.entrySet()){\\r\\n                        String key = entry.getKey();\\r\\n                        String value = entry.getValue();\\r\\n                        if (value == null) {\\r\\n                            value = \\\"0\\\";\\r\\n                        }\\r\\n                        Long ratio =  Long.parseLong(value);\\r\\n                        Skill skill = new Skill();\\r\\n                        skill.setName(key);\\r\\n                        skill.setRatio(ratio);\\r\\n                        skills.add(skill);\\r\\n                    }\\r\\n                    userResponseDto.setSkills(skills);\\r\\n                } else {\\r\\n                    userResponseDto.setSkills(new ArrayList<>());\\r\\n                }\\r\\n\\r\\n                List<Project> projects = new ArrayList<>();\\r\\n                Map<String, Object> projectMap = (Map<String, Object>)customFieldInstanceService.getCFValue(user,\\\"projects\\\");\\r\\n                if (projectMap != null) {\\r\\n                    for (Map.Entry<String, Object> entry : projectMap.entrySet()){\\r\\n                        String key = entry.getKey();\\r\\n                        String value = (String) entry.getValue();\\r\\n                        Project project = new Project();\\r\\n                        project.setName(key);\\r\\n                        project.setRole(value);\\r\\n                        projects.add(project);\\r\\n                    }\\r\\n                    userResponseDto.setProjects(projects);\\r\\n                }\\r\\n\\r\\n                List<Education> educations = new ArrayList<>();\\r\\n                List<EntityReferenceWrapper> childEntityReferencesEducations = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"educations\\\");\\r\\n                if (CollectionUtils.isNotEmpty(childEntityReferencesEducations)) {\\r\\n                    for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesEducations) {\\r\\n                        CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                        if (cei == null) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        Education education = new Education();\\r\\n                        String degreeTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"degreeTitle\\\");\\r\\n                        String university = (String) customFieldInstanceService.getCFValue(cei, \\\"university\\\");\\r\\n                        String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                        String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                        education.setDegreeTitle(degreeTitle);\\r\\n                        education.setUniversity(university);\\r\\n                        education.setFromYear(fromYear);\\r\\n                        education.setToYear(toYear);\\r\\n                        educations.add(education);\\r\\n                    }\\r\\n                    userResponseDto.setEducations(educations);\\r\\n                }\\r\\n\\r\\n                List<Course> courses = new ArrayList<>();\\r\\n                List<EntityReferenceWrapper> childEntityReferencesCourses = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"courses\\\");\\r\\n                if (CollectionUtils.isNotEmpty(childEntityReferencesCourses)) {\\r\\n                    for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesCourses) {\\r\\n                        CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                        if (cei == null) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        Course course = new Course();\\r\\n                        String courseTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"courseTitle\\\");\\r\\n                        String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                        String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                        course.setCourseTitle(courseTitle);\\r\\n                        course.setFromYear(fromYear);\\r\\n                        course.setToYear(toYear);\\r\\n                        courses.add(course);\\r\\n                    }\\r\\n                    userResponseDto.setCourses(courses);\\r\\n                }\\r\\n\\r\\n                List<Mission> missions = new ArrayList<>();\\r\\n                List<EntityReferenceWrapper> childEntityReferencesMissions = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"missions\\\");\\r\\n                if (CollectionUtils.isNotEmpty(childEntityReferencesMissions)) {\\r\\n                    for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesMissions) {\\r\\n                        CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                        if (cei == null) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        Mission mission = new Mission();\\r\\n                        String missionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"missionTitle\\\");\\r\\n                        String oldMissionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"oldMissionTitle\\\");\\r\\n                        String missionDescription = (String) customFieldInstanceService.getCFValue(cei, \\\"missionDescription\\\");\\r\\n                        Date fromDate = (Date) customFieldInstanceService.getCFValue(cei,\\\"fromDate\\\");\\r\\n                        Date toDate = (Date) customFieldInstanceService.getCFValue(cei, \\\"toDate\\\");\\r\\n                        mission.setMissionTitle(missionTitle);\\r\\n                        mission.setOldMissionTitle(oldMissionTitle);\\r\\n                        mission.setMissionDescription(missionDescription);\\r\\n                        mission.setFromDate(DateUtils.formatDateWithPattern(fromDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                        mission.setToDate(DateUtils.formatDateWithPattern(toDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                        mission.setId(cei.getId());\\r\\n                        missions.add(mission);\\r\\n                    }\\r\\n                    userResponseDto.setMissions(missions);\\r\\n                }\\r\\n\\r\\n                List<EntityReferenceWrapper> childEntityReferencesAvailability = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user,\\\"availability\\\");\\r\\n                log.info(\\\"childEntityReferencesAvailability size {}\\\", childEntityReferencesAvailability != null ? childEntityReferencesAvailability.size() : null);\\r\\n                if (CollectionUtils.isNotEmpty(childEntityReferencesAvailability)) {\\r\\n                    Availability availability = new Availability();\\r\\n                    for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesAvailability) {\\r\\n                        CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                        if (cei == null) {\\r\\n                            continue;\\r\\n                        }\\r\\n                        log.info(\\\"AvailabilityCode {}\\\", cei.getCode());\\r\\n                        Long hoursWork = (Long) customFieldInstanceService.getCFValue(cei, \\\"hoursWork\\\");\\r\\n                        String infos = (String) customFieldInstanceService.getCFValue(cei,\\\"infos\\\");\\r\\n                        String timeZone = (String) customFieldInstanceService.getCFValue(cei,\\\"timeZone\\\");\\r\\n                        List<String> vocations = (List<String>) customFieldInstanceService.getCFValue(cei, \\\"vocations\\\");\\r\\n                        if (hoursWork == null) {\\r\\n                            hoursWork = 0L;\\r\\n                        }\\r\\n                        if (infos == null) {\\r\\n                            infos =\\\"\\\" ;\\r\\n                        }\\r\\n                        if (timeZone == null) {\\r\\n                            timeZone =\\\"\\\" ;\\r\\n                        }\\r\\n                        availability.setHoursWork(hoursWork);\\r\\n                        availability.setInfos(infos);\\r\\n                        availability.setTimeZone(timeZone);\\r\\n                        if(vocations != null){\\r\\n                            availability.setVocations(vocations);\\r\\n                        } else {\\r\\n                            vocations = new ArrayList();\\r\\n                            availability.setVocations(vocations);\\r\\n                        }\\r\\n                    }\\r\\n                    userResponseDto.setAvailability( availability);\\r\\n                }\\r\\n                userResponseDtos.add(userResponseDto);\\r\\n            }\\r\\n\\r\\n            responseMap.put(\\\"users\\\", userResponseDtos);\\r\\n        } else {\\r\\n            responseMap.put(\\\"users\\\", null);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\t@Override\\r\\n\\tpublic void init(Map<String, Object> context) throws BusinessException {\\r\\n\\t\\tlog.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n\\t}\\r\\n\\r\\n\\tpublic class UserResponseDto {\\r\\n\\r\\n        private String username;\\r\\n        private String firstName;\\r\\n        private String lastName;\\r\\n        private String name;\\r\\n        private String sinceDate;\\r\\n        private String email;\\r\\n        private String photo;\\r\\n        private String job;\\r\\n        private String skypeId;\\r\\n        private String country;\\r\\n        private String linkedin;\\r\\n        private String bio;\\r\\n        private List<Skill> skills;\\r\\n        private List<Project> projects;\\r\\n        private List<Education> educations;\\r\\n        private List<Course> courses;\\r\\n        private List<Mission> missions;\\r\\n        private Availability availability;\\r\\n        private String photoBase64;\\r\\n\\r\\n\\r\\n        public String getUsername() { return username; }\\r\\n\\r\\n        public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n        public String getFirstName() { return firstName; }\\r\\n\\r\\n        public void setFirstName(String firstName) {\\r\\n            this.firstName = firstName;\\r\\n        }\\r\\n\\r\\n        public String getLastName() {\\r\\n            return lastName;\\r\\n        }\\r\\n\\r\\n        public void setLastName(String lastName) {\\r\\n            this.lastName = lastName;\\r\\n        }\\r\\n\\r\\n        public String getName() {\\r\\n            return name;\\r\\n        }\\r\\n\\r\\n        public void setName(String name) {\\r\\n            this.name = name;\\r\\n        }\\r\\n\\r\\n        public String getSinceDate() {\\r\\n            return sinceDate;\\r\\n        }\\r\\n\\r\\n        public void setSinceDate(String sinceDate) {\\r\\n            this.sinceDate = sinceDate;\\r\\n        }\\r\\n\\r\\n        public String getPhoto() {\\r\\n            return photo;\\r\\n        }\\r\\n\\r\\n        public void setPhoto(String photo) {\\r\\n            this.photo = photo;\\r\\n        }\\r\\n\\r\\n        public String getJob() {\\r\\n            return job;\\r\\n        }\\r\\n\\r\\n        public void setJob(String job) {\\r\\n            this.job = job;\\r\\n        }\\r\\n\\r\\n        public String getSkypeId() {\\r\\n            return skypeId;\\r\\n        }\\r\\n\\r\\n        public void setSkypeId(String skypeId) {\\r\\n            this.skypeId = skypeId;\\r\\n        }\\r\\n\\r\\n        public String getCountry() {\\r\\n            return country;\\r\\n        }\\r\\n\\r\\n        public void setCountry(String country) {\\r\\n            this.country = country;\\r\\n        }\\r\\n\\r\\n        public String getLinkedin() {\\r\\n            return linkedin;\\r\\n        }\\r\\n\\r\\n        public void setLinkedin(String linkedin) {\\r\\n            this.linkedin = linkedin;\\r\\n        }\\r\\n\\r\\n        public String getBio() {\\r\\n            return bio;\\r\\n        }\\r\\n\\r\\n        public void setBio(String bio) {\\r\\n            this.bio = bio;\\r\\n        }\\r\\n\\r\\n        public String getEmail() { return email; }\\r\\n\\r\\n        public void setEmail(String email) { this.email = email; }\\r\\n\\r\\n        public List<Skill> getSkills() { return skills; }\\r\\n\\r\\n        public void setSkills(List<Skill> skills) { this.skills = skills; }\\r\\n\\r\\n        public List<Project> getProjects() { return projects; }\\r\\n\\r\\n        public void setProjects(List<Project> projects) { this.projects = projects; }\\r\\n\\r\\n        public List<Education> getEducations() { return educations; }\\r\\n\\r\\n        public void setEducations(List<Education> educations) { this.educations = educations; }\\r\\n\\r\\n        public List<Course> getCourses() { return courses; }\\r\\n\\r\\n        public void setCourses(List<Course> courses) { this.courses = courses; }\\r\\n\\r\\n        public List<Mission> getMissions() { return missions; }\\r\\n\\r\\n        public void setMissions(List<Mission> missions) { this.missions = missions; }\\r\\n\\r\\n        public Availability getAvailability() { return availability; }\\r\\n\\r\\n        public void setAvailability(Availability availability) { this.availability = availability; }\\r\\n\\r\\n        public String getPhotoBase64() { return photoBase64; }\\r\\n\\r\\n        public void setPhotoBase64(String photoBase64) { this.photoBase64 = photoBase64; }\\r\\n    }\\r\\n\\r\\n    public class Skill {\\r\\n\\r\\n        private String name;\\r\\n        private Long ratio;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public Long getRatio() { return ratio; }\\r\\n\\r\\n        public void setRatio(Long ratio) { this.ratio = ratio; }\\r\\n    }\\r\\n\\r\\n    public class Project {\\r\\n\\r\\n        private String name;\\r\\n        private String role;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public String getRole() { return role; }\\r\\n\\r\\n        public void setRole(String role) { this.role = role; }\\r\\n    }\\r\\n\\r\\n    public class Education {\\r\\n\\r\\n        private String degreeTitle;\\r\\n        private String university;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getDegreeTitle() { return degreeTitle; }\\r\\n\\r\\n        public void setDegreeTitle(String degreeTitle) { this.degreeTitle = degreeTitle; }\\r\\n\\r\\n        public String getUniversity() { return university; }\\r\\n\\r\\n        public void setUniversity(String university) { this.university = university; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n    }\\r\\n\\r\\n    public class Course {\\r\\n\\r\\n        private String courseTitle;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getCourseTitle() { return courseTitle; }\\r\\n\\r\\n        public void setCourseTitle(String courseTitle) { this.courseTitle = courseTitle; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n    }\\r\\n\\r\\n    public class Mission {\\r\\n\\r\\n        private String missionTitle;\\r\\n        private String oldMissionTitle;\\r\\n        private String missionDescription;\\r\\n        private String fromDate;\\r\\n        private String toDate;\\r\\n        private Long id;\\r\\n\\r\\n        public String getMissionTitle() { return missionTitle; }\\r\\n\\r\\n        public void setMissionTitle(String missionTitle) { this.missionTitle = missionTitle; }\\r\\n\\r\\n        public String getOldMissionTitle() { return oldMissionTitle; }\\r\\n\\r\\n        public void setOldMissionTitle(String oldMissionTitle) { this.oldMissionTitle = oldMissionTitle; }\\r\\n\\r\\n        public String getMissionDescription() { return missionDescription; }\\r\\n\\r\\n        public void setMissionDescription(String missionDescription) { this.missionDescription = missionDescription; }\\r\\n\\r\\n        public String getFromDate() { return fromDate; }\\r\\n\\r\\n        public void setFromDate(String fromDate) { this.fromDate = fromDate; }\\r\\n\\r\\n        public String getToDate() { return toDate; }\\r\\n\\r\\n        public void setToDate(String toDate) { this.toDate = toDate; }\\r\\n\\r\\n        public Long getId() { return id; }\\r\\n\\r\\n        public void setId(Long id) { this.id = id; }\\r\\n    }\\r\\n\\r\\n    public class Availability {\\r\\n\\r\\n        private Long hoursWork;\\r\\n        private String infos;\\r\\n        private String timeZone;\\r\\n        private List<String> vocations;\\r\\n\\r\\n        public Long getHoursWork() {\\r\\n            return hoursWork;\\r\\n        }\\r\\n\\r\\n        public void setHoursWork(Long hoursWork) {\\r\\n            this.hoursWork = hoursWork;\\r\\n        }\\r\\n\\r\\n        public String getInfos() {\\r\\n            return infos;\\r\\n        }\\r\\n\\r\\n        public void setInfos(String infos) {\\r\\n            this.infos = infos;\\r\\n        }\\r\\n\\r\\n        public String getTimeZone() {\\r\\n            return timeZone;\\r\\n        }\\r\\n\\r\\n        public void setTimeZone(String timeZone) {\\r\\n            this.timeZone = timeZone;\\r\\n        }\\r\\n\\r\\n        public List<String> getVocations() {\\r\\n            return vocations;\\r\\n        }\\r\\n\\r\\n        public void setVocations(List<String> vocations) {\\r\\n            this.vocations = vocations;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    public Map<String, Object> getResponseMap() { return responseMap; }\\r\\n\\r\\n    public List<User> getUsers() { return users; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "https://portal.manaty.net/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "https",
							"host": [
								"portal",
								"manaty",
								"net"
							],
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GetUser script   ",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "meveo",
									"type": "string"
								},
								{
									"key": "username",
									"value": "meveo.admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.GetUserScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.api.exception.BusinessApiException;\\r\\nimport org.meveo.commons.utils.ParamBean;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport javax.inject.Inject;\\r\\nimport java.io.File;\\r\\nimport java.io.FileInputStream;\\r\\nimport java.io.IOException;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class GetUserScript extends Script {\\r\\n\\tprivate static final Logger log = LoggerFactory.getLogger(GetUserTestScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private String firstName;\\r\\n    private String lastName;\\r\\n    private String sinceDate;\\r\\n    private String photo;\\r\\n    private String job;\\r\\n    private String skypeId;\\r\\n    private String country;\\r\\n    private String linkedin;\\r\\n    private String bio;\\r\\n    private String photoBase64;\\r\\n    private Map<String, Object> responseMap = new HashMap<>();\\r\\n    private List<Skill> skills;\\r\\n    private List<Project> projects;\\r\\n    private List<Education> educations;\\r\\n    private List<Course> courses;\\r\\n    private List<Mission> missions;\\r\\n    private Availability availability ;\\r\\n\\r\\n    private String getPhoto(String fileName) throws BusinessApiException {\\r\\n        String meveoPath = ParamBean.getInstance().getProperty(\\\"providers.rootDir\\\", \\\"\\/opt\\/wildfly\\/opencelldata\\/\\\");\\r\\n        String rootProviderDir = ParamBean.getInstance().getProperty(\\\"provider.rootDir\\\", \\\"manaty\\\");;\\r\\n        File file = new File(meveoPath + File.separator + rootProviderDir + File.separator + fileName);\\r\\n\\r\\n        if (!file.exists()) {\\r\\n            throw new BusinessApiException(\\\"File does not exists: \\\" + file.getPath());\\r\\n        }\\r\\n        try {\\r\\n            FileInputStream fis = new FileInputStream(file);\\r\\n            byte[] bytes = new byte[(int)file.length()];\\r\\n            fis.read(bytes);\\r\\n            return Base64.getEncoder().encodeToString(bytes);\\r\\n        } catch (IOException e) {\\r\\n            throw new BusinessApiException(\\\"Error file: \\\" + file.getName() + \\\". \\\" + e.getMessage());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n\\tpublic void execute(Map<String, Object> context) throws BusinessException {\\r\\n\\t\\tlog.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            responseMap.put(\\\"username\\\", user.getUserName());\\r\\n            responseMap.put(\\\"lastName\\\", user.getName() != null ? user.getName().getLastName() != null ? user.getName().getLastName(): \\\"\\\" : \\\"\\\");\\r\\n            responseMap.put(\\\"firstName\\\", user.getName() != null ? user.getName().getFirstName() != null ? user.getName().getFirstName(): \\\"\\\" :\\\"\\\");\\r\\n            responseMap.put(\\\"name\\\", user.getName() != null && user.getName().getFirstName() != null ? user.getName().getFirstName() + \\\" \\\" : \\\"\\\"  + user.getName() != null && user.getName().getLastName() != null ? user.getName().getLastName() : \\\"\\\");\\r\\n            responseMap.put(\\\"email\\\", user.getEmail());\\r\\n\\r\\n            List<Skill> skills = new ArrayList<>();\\r\\n            Map<String, String> skillMap = (Map<String, String>)customFieldInstanceService.getCFValue(user,\\\"skills\\\");\\r\\n            if (skillMap != null) {\\r\\n                for (Map.Entry<String, String> entry : skillMap.entrySet()){\\r\\n                    String key = entry.getKey();\\r\\n                    String value = entry.getValue();\\r\\n                    if (value == null) {\\r\\n                        value = \\\"0\\\";\\r\\n                    }\\r\\n                    Long ratio =  Long.parseLong(value);\\r\\n                    Skill skill = new Skill();\\r\\n                    skill.setName(key);\\r\\n                    skill.setRatio(ratio);\\r\\n                    skills.add(skill);\\r\\n                }\\r\\n            }\\r\\n            responseMap.put(\\\"skills\\\", skills);\\r\\n\\r\\n            List<Project> projects = new ArrayList<>();\\r\\n            Map<String, Object> projectMap = (Map<String, Object>)customFieldInstanceService.getCFValue(user,\\\"projects\\\");\\r\\n            if (projectMap != null) {\\r\\n                for (Map.Entry<String, Object> entry : projectMap.entrySet()){\\r\\n                    String key = entry.getKey();\\r\\n                    String value = (String) entry.getValue();\\r\\n                    Project project = new Project();\\r\\n                    project.setName(key);\\r\\n                    project.setRole(value);\\r\\n                    projects.add(project);\\r\\n                }\\r\\n            }\\r\\n            responseMap.put(\\\"projects\\\", projects);\\r\\n\\r\\n            List<Education> educations = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesEducations = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"educations\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesEducations)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesEducations) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n\\r\\n                    Education education = new Education();\\r\\n                    String degreeTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"degreeTitle\\\");\\r\\n                    String university = (String) customFieldInstanceService.getCFValue(cei, \\\"university\\\");\\r\\n                    String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                    String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                    education.setDegreeTitle(degreeTitle);\\r\\n                    education.setUniversity(university);\\r\\n                    education.setFromYear(fromYear);\\r\\n                    education.setToYear(toYear);\\r\\n                    educations.add(education);\\r\\n                }\\r\\n            }\\r\\n            responseMap.put(\\\"educations\\\",educations);\\r\\n\\r\\n            List<Course> courses = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesCourses = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"courses\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesCourses)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesCourses) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n\\r\\n                    Course course = new Course();\\r\\n                    String courseTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"courseTitle\\\");\\r\\n                    String fromYear = (String) customFieldInstanceService.getCFValue(cei,\\\"fromYear\\\");\\r\\n                    String toYear = (String) customFieldInstanceService.getCFValue(cei, \\\"toYear\\\");\\r\\n                    course.setCourseTitle(courseTitle);\\r\\n                    course.setFromYear(fromYear);\\r\\n                    course.setToYear(toYear);\\r\\n                    courses.add(course);\\r\\n                }\\r\\n            }\\r\\n            responseMap.put(\\\"courses\\\",courses);\\r\\n\\r\\n            List<Mission> missions = new ArrayList<>();\\r\\n            List<EntityReferenceWrapper> childEntityReferencesMissions = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"missions\\\");\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesMissions)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesMissions) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n\\r\\n                    Mission mission = new Mission();\\r\\n                    String missionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"missionTitle\\\");\\r\\n                    String oldMissionTitle = (String) customFieldInstanceService.getCFValue(cei, \\\"oldMissionTitle\\\");\\r\\n                    String missionDescription = (String) customFieldInstanceService.getCFValue(cei, \\\"missionDescription\\\");\\r\\n                    Date fromDate = (Date) customFieldInstanceService.getCFValue(cei,\\\"fromDate\\\");\\r\\n                    Date toDate = (Date) customFieldInstanceService.getCFValue(cei, \\\"toDate\\\");\\r\\n                    mission.setMissionTitle(missionTitle);\\r\\n                    mission.setOldMissionTitle(oldMissionTitle);\\r\\n                    mission.setMissionDescription(missionDescription);\\r\\n                    mission.setFromDate(DateUtils.formatDateWithPattern(fromDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                    mission.setToDate(DateUtils.formatDateWithPattern(toDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n                    mission.setId(cei.getId());\\r\\n                    missions.add(mission);\\r\\n                }\\r\\n            }\\r\\n            responseMap.put(\\\"missions\\\",missions);\\r\\n\\r\\n            List<EntityReferenceWrapper> childEntityReferencesAvailability = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user,\\\"availability\\\");\\r\\n            log.info(\\\"childEntityReferencesAvailability size {}\\\", childEntityReferencesAvailability != null ? childEntityReferencesAvailability.size() : null);\\r\\n            Availability availability = new Availability();\\r\\n            availability.setHoursWork(0L);\\r\\n            if (CollectionUtils.isNotEmpty(childEntityReferencesAvailability)) {\\r\\n                for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesAvailability) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    }\\r\\n                    log.info(\\\"AvailabilityCode {}\\\", cei.getCode());\\r\\n                    Long hoursWork = (Long) customFieldInstanceService.getCFValue(cei, \\\"hoursWork\\\");\\r\\n                    String infos = (String) customFieldInstanceService.getCFValue(cei,\\\"infos\\\");\\r\\n                    String timeZone = (String) customFieldInstanceService.getCFValue(cei,\\\"timeZone\\\");\\r\\n                    List<String> vocations = (List<String>) customFieldInstanceService.getCFValue(cei, \\\"vocations\\\");\\r\\n                    if (hoursWork == null) {\\r\\n                        hoursWork = 0L;\\r\\n                    }\\r\\n                    if (infos == null) {\\r\\n                        infos =\\\"\\\" ;\\r\\n                    }\\r\\n                    if (timeZone == null) {\\r\\n                        timeZone =\\\"\\\" ;\\r\\n                    }\\r\\n                    availability.setHoursWork(hoursWork);\\r\\n                    availability.setInfos(infos);\\r\\n                    availability.setTimeZone(timeZone);\\r\\n                    if(vocations != null){\\r\\n                        availability.setVocations(vocations);\\r\\n                    } else {\\r\\n                        vocations = new ArrayList();\\r\\n                        availability.setVocations(vocations);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            responseMap.put(\\\"availability\\\", availability);\\r\\n\\r\\n            String skypeId = (String) customFieldInstanceService.getCFValue(user,\\\"skypeId\\\");\\r\\n            Date sinceDate = (Date) customFieldInstanceService.getCFValue(user,\\\"sinceDate\\\");\\r\\n            String photo = (String) customFieldInstanceService.getCFValue(user, \\\"photo\\\");\\r\\n            String cv = (String) customFieldInstanceService.getCFValue(user, \\\"cv\\\");\\r\\n            String job = (String) customFieldInstanceService.getCFValue(user,\\\"job\\\");\\r\\n            String country = (String) customFieldInstanceService.getCFValue(user, \\\"country\\\");\\r\\n            String linkedin = (String) customFieldInstanceService.getCFValue(user, \\\"linkedin\\\");\\r\\n            String bio = (String) customFieldInstanceService.getCFValue(user, \\\"bio\\\");\\r\\n            if (skypeId == null) {\\r\\n                skypeId = \\\"\\\";\\r\\n            }\\r\\n            if (!StringUtils.isBlank(photo)){\\r\\n                try {\\r\\n                    responseMap.put(\\\"photoBase64\\\", getPhoto(photo));\\r\\n                } catch (BusinessApiException e) {\\r\\n                    log.info(\\\"Error photoBase64 size {}\\\", e.getMessage());\\r\\n                }\\r\\n            }\\r\\n\\r\\n            responseMap.put(\\\"skypeId\\\", skypeId);\\r\\n            responseMap.put(\\\"sinceDate\\\" ,DateUtils.formatDateWithPattern(sinceDate, \\\"dd\\/MM\\/yyyy\\\"));\\r\\n            responseMap.put(\\\"photo\\\", photo);\\r\\n            responseMap.put(\\\"cv\\\", cv);\\r\\n            responseMap.put(\\\"job\\\", job);\\r\\n            responseMap.put(\\\"country\\\", country);\\r\\n            responseMap.put(\\\"linkedin\\\", linkedin);\\r\\n            responseMap.put(\\\"bio\\\", bio);\\r\\n        } else {\\r\\n            responseMap.put(\\\"skypeId\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"sinceDate\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"photo\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"cv\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"job\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"country\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"linkedin\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"bio\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"username\\\",\\\"\\\");\\r\\n            responseMap.put(\\\"skills\\\",new ArrayList<Skill>());\\r\\n            responseMap.put(\\\"projects\\\",new ArrayList<Project>());\\r\\n            responseMap.put(\\\"educations\\\",new ArrayList<Education>());\\r\\n            responseMap.put(\\\"courses\\\",new ArrayList<Course>());\\r\\n            responseMap.put(\\\"missions\\\",new ArrayList<Mission>());\\r\\n            responseMap.put(\\\"availability\\\",\\\"\\\");\\r\\n            responseMap.put(\\\"photoBase64\\\",\\\"\\\");\\r\\n            responseMap.put(\\\"name\\\", \\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\t@Override\\r\\n\\tpublic void init(Map<String, Object> context) throws BusinessException {\\r\\n\\t\\tlog.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n\\t}\\r\\n\\r\\n    public class Skill {\\r\\n        private String name;\\r\\n        private Long ratio;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public Long getRatio() { return ratio; }\\r\\n\\r\\n        public void setRatio(Long ratio) { this.ratio = ratio; }\\r\\n    }\\r\\n\\r\\n    public class Project {\\r\\n        private String name;\\r\\n        private String role;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public String getRole() { return role; }\\r\\n\\r\\n        public void setRole(String role) { this.role = role; }\\r\\n    }\\r\\n\\r\\n    public class Education {\\r\\n        private String degreeTitle;\\r\\n        private String university;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getDegreeTitle() { return degreeTitle; }\\r\\n\\r\\n        public void setDegreeTitle(String degreeTitle) { this.degreeTitle = degreeTitle; }\\r\\n\\r\\n        public String getUniversity() { return university; }\\r\\n\\r\\n        public void setUniversity(String university) { this.university = university; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n    }\\r\\n\\r\\n    public class Course {\\r\\n        private String courseTitle;\\r\\n        private String fromYear;\\r\\n        private String toYear;\\r\\n\\r\\n        public String getCourseTitle() { return courseTitle; }\\r\\n\\r\\n        public void setCourseTitle(String courseTitle) { this.courseTitle = courseTitle; }\\r\\n\\r\\n        public String getFromYear() { return fromYear; }\\r\\n\\r\\n        public void setFromYear(String fromYear) { this.fromYear = fromYear; }\\r\\n\\r\\n        public String getToYear() { return toYear; }\\r\\n\\r\\n        public void setToYear(String toYear) { this.toYear = toYear; }\\r\\n    }\\r\\n\\r\\n    public class Mission {\\r\\n\\r\\n        private String missionTitle;\\r\\n        private String oldMissionTitle;\\r\\n        private String missionDescription;\\r\\n        private String fromDate;\\r\\n        private String toDate;\\r\\n        private Long id;\\r\\n\\r\\n        public String getMissionTitle() { return missionTitle; }\\r\\n\\r\\n        public void setMissionTitle(String missionTitle) { this.missionTitle = missionTitle; }\\r\\n\\r\\n        public String getOldMissionTitle() { return oldMissionTitle; }\\r\\n\\r\\n        public void setOldMissionTitle(String oldMissionTitle) { this.oldMissionTitle = oldMissionTitle; }\\r\\n\\r\\n        public String getMissionDescription() { return missionDescription; }\\r\\n\\r\\n        public void setMissionDescription(String missionDescription) { this.missionDescription = missionDescription; }\\r\\n\\r\\n        public String getFromDate() { return fromDate; }\\r\\n\\r\\n        public void setFromDate(String fromDate) { this.fromDate = fromDate; }\\r\\n\\r\\n        public String getToDate() { return toDate; }\\r\\n\\r\\n        public void setToDate(String toDate) { this.toDate = toDate; }\\r\\n\\r\\n        public Long getId() { return id; }\\r\\n\\r\\n        public void setId(Long id) { this.id = id; }\\r\\n    }\\r\\n\\r\\n    public class Availability {\\r\\n\\r\\n        private Long hoursWork;\\r\\n        private String infos;\\r\\n        private String timeZone;\\r\\n        private List<String> vocations;\\r\\n\\r\\n        public Long getHoursWork() {\\r\\n            return hoursWork;\\r\\n        }\\r\\n\\r\\n        public void setHoursWork(Long hoursWork) {\\r\\n            this.hoursWork = hoursWork;\\r\\n        }\\r\\n\\r\\n        public String getInfos() {\\r\\n            return infos;\\r\\n        }\\r\\n\\r\\n        public void setInfos(String infos) {\\r\\n            this.infos = infos;\\r\\n        }\\r\\n\\r\\n        public String getTimeZone() {\\r\\n            return timeZone;\\r\\n        }\\r\\n\\r\\n        public void setTimeZone(String timeZone) { this.timeZone = timeZone; }\\r\\n\\r\\n        public List<String> getVocations() { return vocations; }\\r\\n\\r\\n        public void setVocations(List<String> vocations) {\\r\\n            this.vocations = vocations;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public String getFirstName() { return firstName; }\\r\\n\\r\\n    public void setFirstName(String firstName) { this.firstName = firstName; }\\r\\n\\r\\n    public String getLastName() { return lastName; }\\r\\n\\r\\n    public void setLastName(String lastName) { this.lastName = lastName; }\\r\\n\\r\\n    public String getSinceDate() { return sinceDate; }\\r\\n\\r\\n    public void setSinceDate(String sinceDate) { this.sinceDate = sinceDate; }\\r\\n\\r\\n    public String getPhoto() { return photo; }\\r\\n\\r\\n    public void setPhoto(String photo) { this.photo = photo; }\\r\\n\\r\\n    public String getJob() { return job; }\\r\\n\\r\\n    public void setJob(String job) { this.job = job; }\\r\\n\\r\\n    public String getSkypeId() { return skypeId; }\\r\\n\\r\\n    public void setSkypeId(String skypeId) { this.skypeId = skypeId; }\\r\\n\\r\\n    public String getCountry() { return country; }\\r\\n\\r\\n    public void setCountry(String country) { this.country = country; }\\r\\n\\r\\n    public String getLinkedin() { return linkedin; }\\r\\n\\r\\n    public void setLinkedin(String linkedin) { this.linkedin = linkedin; }\\r\\n\\r\\n    public String getBio() { return bio; }\\r\\n\\r\\n    public void setBio(String bio) { this.bio = bio; }\\r\\n\\r\\n    public Map<String, Object> getResponseMap() { return responseMap; }\\r\\n\\r\\n    public List<Skill> getSkills() { return skills; }\\r\\n\\r\\n    public List<Project> getProjects() { return projects; }\\r\\n\\r\\n    public List<Education> getEducations() { return educations; }\\r\\n\\r\\n    public List<Course> getCourses() { return courses; }\\r\\n\\r\\n    public List<Mission> getMissions() { return missions; }\\r\\n\\r\\n    public Availability getAvailability() { return availability; }\\r\\n\\r\\n    public void setPhotoBase64(String photoBase64) { this.photoBase64 = photoBase64; }\\r\\n\\r\\n    public String getPhotoBase64() { return photoBase64; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "https://portal.manaty.net/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "https",
							"host": [
								"portal",
								"manaty",
								"net"
							],
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create UserUpdate script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.UserUpdateScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.model.shared.Name;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class UserUpdateScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(UserUpdateScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private String email;\\r\\n    private String firstName;\\r\\n    private String lastName;\\r\\n    private String sinceDate;\\r\\n    private String job;\\r\\n    private String skypeId;\\r\\n    private String country;\\r\\n    private String linkedin;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n\\r\\n        if (user != null) {\\r\\n            Name name = new Name();\\r\\n            if (!StringUtils.isBlank(getLastName()) ||!StringUtils.isBlank(getFirstName())) {\\r\\n                name.setLastName(getLastName());\\r\\n                name.setFirstName(getFirstName());\\r\\n            }\\r\\n\\r\\n            user.setName(name);\\r\\n            userService.update(user);\\r\\n            customFieldInstanceService.setCFValue(user, \\\"skypeId\\\", getSkypeId());\\r\\n            customFieldInstanceService.setCFValue(user, \\\"sinceDate\\\", DateUtils.parseDateWithPattern(getSinceDate(), \\\"yyyy-MM-dd\\\"));\\r\\n\\r\\n            if (!StringUtils.isBlank(getEmail())) {\\r\\n                user.setEmail(getEmail());\\r\\n            }\\r\\n\\r\\n            customFieldInstanceService.setCFValue(user,\\\"job\\\", getJob());\\r\\n            customFieldInstanceService.setCFValue(user, \\\"country\\\", getCountry());\\r\\n            customFieldInstanceService.setCFValue(user, \\\"linkedin\\\", getLinkedin());\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public String getEmail() { return email; }\\r\\n\\r\\n    public void setEmail(String email) { this.email = email; }\\r\\n\\r\\n    public String getFirstName() { return firstName; }\\r\\n\\r\\n    public void setFirstName(String firstName) { this.firstName = firstName; }\\r\\n\\r\\n    public String getLastName() { return lastName; }\\r\\n\\r\\n    public void setLastName(String lastName) { this.lastName = lastName; }\\r\\n\\r\\n    public String getSinceDate() { return sinceDate; }\\r\\n\\r\\n    public void setSinceDate(String sinceDate) { this.sinceDate = sinceDate; }\\r\\n\\r\\n    public String getJob() { return job; }\\r\\n\\r\\n    public void setJob(String job) { this.job = job; }\\r\\n\\r\\n    public String getSkypeId() { return skypeId; }\\r\\n\\r\\n    public void setSkypeId(String skypeId) { this.skypeId = skypeId; }\\r\\n\\r\\n    public String getCountry() { return country; }\\r\\n\\r\\n    public void setCountry(String country) { this.country = country; }\\r\\n\\r\\n    public String getLinkedin() { return linkedin; }\\r\\n\\r\\n    public void setLinkedin(String linkedin) { this.linkedin = linkedin; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RemoveUserMission script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.RemoveUserMissionScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class RemoveUserMissionScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(RemoveUserMissionScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private LinkedHashMap<String, Object> mission;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        List<EntityReferenceWrapper> childEntityReferences;\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            if (mission != null) {\\r\\n                String missionTitle = getValue(mission, \\\"missionTitle\\\");\\r\\n                String missionCode = user.getUserName() + \\\"_\\\" + missionTitle;\\r\\n                childEntityReferences = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user, \\\"missions\\\");\\r\\n                for (EntityReferenceWrapper missionEntityReferenceWrapper : childEntityReferences) {\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(missionEntityReferenceWrapper.getClassnameCode(), missionEntityReferenceWrapper.getCode());\\r\\n                    if (cei == null) {\\r\\n                        continue;\\r\\n                    } else {\\r\\n                        if (cei.getCode().equals(missionCode)) {\\r\\n                            childEntityReferences.remove(missionEntityReferenceWrapper);\\r\\n                            customFieldInstanceService.setCFValue(user, \\\"missions\\\", childEntityReferences);\\r\\n                            customEntityInstanceService.remove(cei.getId());\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? (String) inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public void setMission(LinkedHashMap<String, Object> mission) { this.mission = mission; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserSkills script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveUserSkillsScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.*;\\r\\n\\r\\npublic class SaveUserSkillsScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveUserSkillsScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private ArrayList<LinkedHashMap<String, Object>> skills;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            if (CollectionUtils.isNotEmpty(skills)) {\\r\\n                Map<String,Object> skillMap = new LinkedHashMap<String, Object>();\\r\\n                for (LinkedHashMap<String, Object> entry : skills) {\\r\\n                    String name = getValue(entry,\\\"name\\\");\\r\\n                    String ratio = getValue(entry,\\\"ratio\\\");\\r\\n                    if (ratio == null) {\\r\\n                        ratio = \\\"0\\\";\\r\\n                    }\\r\\n                    skillMap.put(name, ratio);\\r\\n                }\\r\\n                customFieldInstanceService.setCFValue(user, \\\"skills\\\", skillMap);\\r\\n            } else {\\r\\n                customFieldInstanceService.setCFValue(user, \\\"skills\\\", null);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? inputMap.get(key) instanceof Integer ? String.valueOf(inputMap.get(key)) : (String)inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public void setSkills(ArrayList<LinkedHashMap<String, Object>> skills) { this.skills = skills; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserProjects script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveUserProjectsScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveUserProjectsScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveUserProjectsScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private ArrayList<LinkedHashMap<String, Object>> projects;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            if (CollectionUtils.isNotEmpty(projects)) {\\r\\n                Map<String,Object> projectMap = new LinkedHashMap<String, Object>();\\r\\n                for (LinkedHashMap<String, Object> entry : projects) {\\r\\n                    String name = getValue(entry,\\\"name\\\");\\r\\n                    String role = getValue(entry,\\\"role\\\");\\r\\n                    if (role == null) {\\r\\n                        role = \\\"\\\";\\r\\n                    }\\r\\n                    projectMap.put(name, role);\\r\\n                }\\r\\n                customFieldInstanceService.setCFValue(user, \\\"projects\\\", projectMap);\\r\\n            } else {\\r\\n                customFieldInstanceService.setCFValue(user, \\\"projects\\\", null);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? (String) inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public void setProjects(ArrayList<LinkedHashMap<String, Object>> projects) { this.projects = projects; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserEducations script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveUserEducationsScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveUserEducationsScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveUserEducationsScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private ArrayList<LinkedHashMap<String, Object>> educations;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        List<EntityReferenceWrapper> childEntityReferences = new ArrayList<>();\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n             if (CollectionUtils.isNotEmpty(educations)) {\\r\\n                 for (LinkedHashMap<String, Object> educationMap : educations) {\\r\\n                     String degreeTitle = getValue(educationMap, \\\"degreeTitle\\\");\\r\\n                     String university = getValue(educationMap, \\\"university\\\");\\r\\n                     String fromYear = getValue(educationMap, \\\"fromYear\\\");\\r\\n                     String toYear = getValue(educationMap, \\\"toYear\\\");\\r\\n                     String educationCode = user.getUserName() + \\\"_\\\" + degreeTitle;\\r\\n                     CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(\\\"Education\\\", educationCode);\\r\\n                     if (cei == null) {\\r\\n                         cei = new CustomEntityInstance();\\r\\n                         cei.setCetCode(\\\"Education\\\");\\r\\n                         cei.setCode(educationCode);\\r\\n                         cei.setDescription(educationCode);\\r\\n                         customEntityInstanceService.create(cei);\\r\\n                     } else {\\r\\n                         cei.setCetCode(\\\"Education\\\");\\r\\n                         cei.setCode(educationCode);\\r\\n                         cei.setDescription(educationCode);\\r\\n                         customEntityInstanceService.update(cei);\\r\\n                     }\\r\\n                     customFieldInstanceService.setCFValue(cei,\\\"degreeTitle\\\",degreeTitle);\\r\\n                     customFieldInstanceService.setCFValue(cei,\\\"university\\\", university);\\r\\n                     customFieldInstanceService.setCFValue(cei,\\\"fromYear\\\", fromYear);\\r\\n                     customFieldInstanceService.setCFValue(cei,\\\"toYear\\\", toYear);\\r\\n\\r\\n                     EntityReferenceWrapper entityReferenceWrapper = new EntityReferenceWrapper(cei);\\r\\n                     childEntityReferences.add(entityReferenceWrapper);\\r\\n                 }\\r\\n                 customFieldInstanceService.setCFValue(user,\\\"educations\\\", childEntityReferences);\\r\\n             } else {\\r\\n                 customFieldInstanceService.setCFValue(user,\\\"educations\\\",null);\\r\\n             }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? (String)inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public void setEducations(ArrayList<LinkedHashMap<String, Object>> educations) { this.educations = educations; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserCourses script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveUserCoursesScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveUserCoursesScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveUserCoursesScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private ArrayList<LinkedHashMap<String, Object>> courses;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        List<EntityReferenceWrapper> childEntityReferences = new ArrayList<>();\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            if (CollectionUtils.isNotEmpty(courses)) {\\r\\n                for (LinkedHashMap<String, Object> courseMap : courses) {\\r\\n                    String courseTitle = getValue(courseMap,\\\"courseTitle\\\");\\r\\n                    String fromYear = getValue(courseMap,\\\"fromYear\\\");\\r\\n                    String toYear = getValue(courseMap,\\\"toYear\\\");\\r\\n                    String courseCode = user.getUserName() + \\\"_\\\" + courseTitle;\\r\\n                    CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(\\\"Course\\\", courseCode);\\r\\n                    if (cei == null) {\\r\\n                        cei = new CustomEntityInstance();\\r\\n                        cei.setCetCode(\\\"Course\\\");\\r\\n                        cei.setCode(courseCode);\\r\\n                        cei.setDescription(courseCode);\\r\\n                        customEntityInstanceService.create(cei);\\r\\n                    } else {\\r\\n                        cei.setCetCode(\\\"Course\\\");\\r\\n                        cei.setCode(courseCode);\\r\\n                        cei.setDescription(courseCode);\\r\\n                        customEntityInstanceService.update(cei);\\r\\n                    }\\r\\n                    customFieldInstanceService.setCFValue(cei,\\\"courseTitle\\\",courseTitle);\\r\\n                    customFieldInstanceService.setCFValue(cei,\\\"fromYear\\\", fromYear);\\r\\n                    customFieldInstanceService.setCFValue(cei,\\\"toYear\\\", toYear);\\r\\n\\r\\n                    EntityReferenceWrapper entityReferenceWrapper = new EntityReferenceWrapper(cei);\\r\\n                    childEntityReferences.add(entityReferenceWrapper);\\r\\n                }\\r\\n                customFieldInstanceService.setCFValue(user,\\\"courses\\\", childEntityReferences);\\r\\n            } else {\\r\\n                customFieldInstanceService.setCFValue(user,\\\"courses\\\",null);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? (String)inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public void setCourses(ArrayList<LinkedHashMap<String, Object>> courses) { this.courses = courses; }\\r\\n\\r\\n}\\r\\n\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserMission script   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveUserMissionScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveUserMissionScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveUserMissionScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private LinkedHashMap<String, Object> mission;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        List<EntityReferenceWrapper> childEntityReferences ;\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null) {\\r\\n            if (mission != null) {\\r\\n                String oldMissionCode = getValue(mission, \\\"oldMissionTitle\\\");\\r\\n                if (!StringUtils.isBlank(oldMissionCode)){\\r\\n                    oldMissionCode = user.getUserName() + \\\"-\\\" + oldMissionCode;\\r\\n                }\\r\\n                String missionTitle = getValue(mission, \\\"missionTitle\\\");\\r\\n                String missionDescription = getValue(mission, \\\"missionDescription\\\");\\r\\n                String fromDate = getValue(mission, \\\"fromDate\\\");\\r\\n                log.info(\\\"fromDate {}\\\", fromDate);\\r\\n                String toDate = getValue(mission, \\\"toDate\\\");\\r\\n                String missionCode = user.getUserName() + \\\"_\\\" + missionTitle;\\r\\n                CustomEntityInstance mission= customEntityInstanceService.findByCodeByCet(\\\"Mission\\\", missionCode);\\r\\n                if (mission == null) {\\r\\n                    mission = new CustomEntityInstance();\\r\\n                    mission.setCetCode(\\\"Mission\\\");\\r\\n                    mission.setCode(missionCode);\\r\\n                    mission.setDescription(missionCode);\\r\\n                    customEntityInstanceService.create(mission);\\r\\n                } else {\\r\\n                    mission.setCetCode(\\\"Mission\\\");\\r\\n                    mission.setCode(missionCode);\\r\\n                    mission.setDescription(missionCode);\\r\\n                    customEntityInstanceService.update(mission);\\r\\n                }\\r\\n                customFieldInstanceService.setCFValue(mission, \\\"missionTitle\\\", missionTitle);\\r\\n                customFieldInstanceService.setCFValue(mission, \\\"oldMissionTitle\\\", oldMissionCode);\\r\\n                customFieldInstanceService.setCFValue(mission, \\\"missionDescription\\\", missionDescription);\\r\\n                customFieldInstanceService.setCFValue(mission, \\\"fromDate\\\", DateUtils.parseDateWithPattern(fromDate,\\\"yyyy-MM-dd\\\"));\\r\\n                customFieldInstanceService.setCFValue(mission, \\\"toDate\\\", DateUtils.parseDateWithPattern(toDate, \\\"yyyy-MM-dd\\\"));\\r\\n                EntityReferenceWrapper entityReferenceWrapper = new EntityReferenceWrapper(mission);\\r\\n                boolean isUpdated = false;\\r\\n                childEntityReferences = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(user,\\\"missions\\\");\\r\\n                if (childEntityReferences == null) {\\r\\n                    childEntityReferences = new ArrayList<>();\\r\\n                } else {\\r\\n                    for (EntityReferenceWrapper missionEntityReferenceWrapper : childEntityReferences) {\\r\\n                        CustomEntityInstance cei =customEntityInstanceService.findByCodeByCet(missionEntityReferenceWrapper.getClassnameCode(), missionEntityReferenceWrapper.getCode());\\r\\n                        if (cei != null && cei.getCode().equals(mission.getCode())) {\\r\\n                            isUpdated = true;\\r\\n                            break;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n                if (!isUpdated) {\\r\\n                    childEntityReferences.add(entityReferenceWrapper);\\r\\n                    customFieldInstanceService.setCFValue(user, \\\"missions\\\", childEntityReferences);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? (String) inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public void setMission(LinkedHashMap<String, Object> mission) { this.mission = mission; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserAvailability script  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveUserAvailabilityScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.infinispan.partitionhandling.AvailabilityMode;\\r\\nimport org.infinispan.partitionhandling.impl.AvailabilityStrategy;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveUserAvailabilityScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveUserAvailabilityScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String username;\\r\\n    private LinkedHashMap<String, Object> availability;\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        User user = userService.findByUsername(username);\\r\\n        if (user != null && availability != null) {\\r\\n            String hoursWork = (String)getValue(availability, \\\"hoursWork\\\");\\r\\n            String infos = (String)getValue(availability, \\\"infos\\\");\\r\\n            String timeZone = (String)getValue(availability, \\\"timeZone\\\");\\r\\n            List<String> vocations = (List<String>)getValue(availability,\\\"vocations\\\") ;\\r\\n            String availabilityCode = user.getUserName() + \\\"_\\\" + hoursWork;\\r\\n            CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(\\\"Availability\\\", availabilityCode);\\r\\n            if (cei == null) {\\r\\n                cei = new CustomEntityInstance();\\r\\n                cei.setCetCode(\\\"Availability\\\");\\r\\n                cei.setCode(availabilityCode);\\r\\n                cei.setDescription(availabilityCode);\\r\\n                customEntityInstanceService.create(cei);\\r\\n            } else {\\r\\n                cei.setCetCode(\\\"Availability\\\");\\r\\n                cei.setCode(availabilityCode);\\r\\n                cei.setDescription(availabilityCode);\\r\\n                customEntityInstanceService.update(cei);\\r\\n                if (!StringUtils.isBlank(hoursWork)) {\\r\\n                    customFieldInstanceService.setCFValue(cei, \\\"hoursWork\\\", Long.parseLong(hoursWork));\\r\\n                } else {\\r\\n                    customFieldInstanceService.setCFValue(cei, \\\"hoursWork\\\", 0L);\\r\\n                }\\r\\n                customFieldInstanceService.setCFValue(cei,\\\"infos\\\", infos);\\r\\n                customFieldInstanceService.setCFValue(cei,\\\"timeZone\\\", timeZone);\\r\\n                customFieldInstanceService.setCFValue(cei,\\\"vocations\\\", vocations);\\r\\n\\r\\n                EntityReferenceWrapper entityReferenceWrapper = new EntityReferenceWrapper(cei);\\r\\n                List<EntityReferenceWrapper> childEntityReferences = new ArrayList<>();\\r\\n                childEntityReferences.add(entityReferenceWrapper);\\r\\n                customFieldInstanceService.setCFValue(user, \\\"availability\\\", childEntityReferences);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private Object getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? inputMap.get(key) instanceof Integer ? String.valueOf(inputMap.get(key)) : inputMap.get(key) : null;\\r\\n    }\\r\\n    public String getUsername() { return username; }\\r\\n\\r\\n    public void setUsername(String username) { this.username = username; }\\r\\n\\r\\n    public void setAvailability(LinkedHashMap<String, Object> availability) { this.availability = availability; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveProjectTeam script  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.SaveProjectTeamScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.util.ArrayList;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.util.List;\\r\\nimport java.util.Map;\\r\\n\\r\\npublic class SaveProjectTeamScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(SaveProjectTeamScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private String code;\\r\\n    private ArrayList<LinkedHashMap<String, Object>> teams;\\r\\n\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        CustomEntityInstance project = customEntityInstanceService.findByCodeByCet(\\\"ProjectUser\\\", getCode());\\r\\n        List<EntityReferenceWrapper> childEntityReferences = new ArrayList<>();\\r\\n        if (CollectionUtils.isNotEmpty(teams)) {\\r\\n            for (LinkedHashMap<String, Object> teamMap : teams) {\\r\\n                String name = getValue(teamMap,\\\"name\\\");\\r\\n                String role = getValue(teamMap,\\\"role\\\");\\r\\n                String fullName = getValue(teamMap,\\\"fullName\\\");\\r\\n                String photoBase64 = getValue(teamMap,\\\"photoBase64\\\");\\r\\n                CustomEntityInstance team = customEntityInstanceService.findByCodeByCet(\\\"Team\\\", name);\\r\\n                if  (team == null) {\\r\\n                    team = new CustomEntityInstance();\\r\\n                    team.setCetCode(\\\"Team\\\");\\r\\n                    team.setCode(name);\\r\\n                    team.setDescription(name);\\r\\n                    customEntityInstanceService.create(team);\\r\\n                } else{\\r\\n                    team.setCetCode(\\\"Team\\\");\\r\\n                    team.setCode(name);\\r\\n                    team.setDescription(name);\\r\\n                    customEntityInstanceService.update(team);\\r\\n                }\\r\\n                customFieldInstanceService.setCFValue(team,\\\"name\\\" ,name);\\r\\n                customFieldInstanceService.setCFValue(team,\\\"role\\\", role);\\r\\n                customFieldInstanceService.setCFValue(team,\\\"fullName\\\", fullName);\\r\\n                customFieldInstanceService.setCFValue(team,\\\"photoBase64\\\", photoBase64);\\r\\n\\r\\n                EntityReferenceWrapper entityReferenceWrapper = new EntityReferenceWrapper(team);\\r\\n                childEntityReferences.add(entityReferenceWrapper);\\r\\n            }\\r\\n            customFieldInstanceService.setCFValue(project,\\\"teams\\\", childEntityReferences);\\r\\n        } else {\\r\\n            customFieldInstanceService.setCFValue(project,\\\"teams\\\", null);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    private String getValue(LinkedHashMap<String, Object> inputMap, String key) {\\r\\n        return inputMap.get(key) != null ? (String) inputMap.get(key) : null;\\r\\n    }\\r\\n\\r\\n    public class Team {\\r\\n        private String name;\\r\\n        private String role;\\r\\n        private String fullName;\\r\\n        private String photoBase64;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public String getRole() { return role; }\\r\\n\\r\\n        public void setRole(String role) { this.role = role; }\\r\\n\\r\\n        public String getFullName() { return fullName; }\\r\\n\\r\\n        public void setFullName(String fullName) { this.fullName = fullName; }\\r\\n\\r\\n        public String getPhotoBase64() { return photoBase64; }\\r\\n\\r\\n        public void setPhotoBase64(String photoBase64) { this.photoBase64 = photoBase64; }\\r\\n    }\\r\\n\\r\\n    public String getCode() { return code; }\\r\\n\\r\\n    public void setCode(String code) { this.code = code; }\\r\\n\\r\\n    public void setTeams(ArrayList<LinkedHashMap<String, Object>> teams) { this.teams = teams; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GetProject script",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\" : \"org.meveo.script.GetProjectScript\",\n    \"script\" : \"package org.meveo.util;\\r\\n\\r\\nimport org.apache.commons.collections.CollectionUtils;\\r\\nimport org.apache.poi.ss.formula.functions.T;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.api.exception.BusinessApiException;\\r\\nimport org.meveo.commons.utils.ParamBean;\\r\\nimport org.meveo.commons.utils.StringUtils;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.crm.EntityReferenceWrapper;\\r\\nimport org.meveo.model.customEntities.CustomEntityInstance;\\r\\nimport org.meveo.model.shared.DateUtils;\\r\\nimport org.meveo.service.admin.impl.UserService;\\r\\nimport org.meveo.service.crm.impl.CustomFieldInstanceService;\\r\\nimport org.meveo.service.custom.CustomEntityInstanceService;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\nimport java.io.File;\\r\\nimport java.io.FileInputStream;\\r\\nimport java.io.IOException;\\r\\nimport java.util.*;\\r\\n\\r\\npublic class GetProjectScript extends Script {\\r\\n    private static final Logger log = LoggerFactory.getLogger(GetProjectScript.class);\\r\\n    private CustomEntityInstanceService customEntityInstanceService;\\r\\n    private CustomFieldInstanceService customFieldInstanceService;\\r\\n    private Map<String, Object> responseMap = new HashMap<>();\\r\\n    private String code;\\r\\n    private String name;\\r\\n    private String client;\\r\\n    private String dateStart;\\r\\n    private String dateEnd;\\r\\n    private String longDescription;\\r\\n    private String link;\\r\\n    private String logo;\\r\\n    private String logoBase64;\\r\\n    private String assemblaLink;\\r\\n    private String shortDescription;\\r\\n    private List<Contact> contacts;\\r\\n    private List<Team> teams;\\r\\n\\r\\n    private String getPhoto(String fileName) throws BusinessApiException {\\r\\n        String meveoPath = ParamBean.getInstance().getProperty(\\\"providers.rootDir\\\", \\\"\\/opt\\/wildfly\\/opencelldata\\/\\\");\\r\\n        String rootProviderDir = ParamBean.getInstance().getProperty(\\\"provider.rootDir\\\", \\\"manaty\\\");;\\r\\n        File file = new File(meveoPath + File.separator + rootProviderDir + File.separator + fileName);\\r\\n\\r\\n        if (!file.exists()) {\\r\\n            throw new BusinessApiException(\\\"File does not exists: \\\" + file.getPath());\\r\\n        }\\r\\n        try {\\r\\n            FileInputStream fis = new FileInputStream(file);\\r\\n            byte[] bytes = new byte[(int)file.length()];\\r\\n            fis.read(bytes);\\r\\n            return Base64.getEncoder().encodeToString(bytes);\\r\\n        } catch (IOException e) {\\r\\n            throw new BusinessApiException(\\\"Error file: \\\" + file.getName() + \\\". \\\" + e.getMessage());\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    @Override\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"Execute...\\\");\\r\\n\\r\\n        UserService userService = (UserService) getServiceInterface(\\\"UserService\\\");\\r\\n        CustomEntityInstance project = customEntityInstanceService.findByCodeByCet(\\\"ProjectUser\\\", code);\\r\\n        if (project != null) {\\r\\n            String name = (String) customFieldInstanceService.getCFValue(project, \\\"name\\\");\\r\\n\\r\\n            EntityReferenceWrapper childEntityReference = (EntityReferenceWrapper) customFieldInstanceService.getCFValue(project, \\\"client\\\");\\r\\n            String client = \\\"\\\";\\r\\n            if (childEntityReference != null) {\\r\\n                client = childEntityReference.getCode();\\r\\n            }\\r\\n            String longDescription = (String) customFieldInstanceService.getCFValue(project, \\\"longDescription\\\");\\r\\n            String shortDescription = (String) customFieldInstanceService.getCFValue(project, \\\"shortDescription\\\");\\r\\n            if (shortDescription == null) {\\r\\n                shortDescription = \\\"\\\";\\r\\n            }\\r\\n            String link = (String) customFieldInstanceService.getCFValue(project, \\\"link\\\");\\r\\n            String logo = (String) customFieldInstanceService.getCFValue(project, \\\"logo\\\");\\r\\n            if (logo == null) {\\r\\n                logo = \\\"\\\";\\r\\n            }\\r\\n            if (!StringUtils.isBlank(logo)) {\\r\\n                try {\\r\\n                    responseMap.put(\\\"logoBase64\\\", getPhoto(logo));\\r\\n                } catch (BusinessApiException e) {\\r\\n                    log.info(\\\"Error logoBase64 size {}\\\", e.getMessage());\\r\\n                }\\r\\n            }\\r\\n            String assemblaLink = (String) customFieldInstanceService.getCFValue(project, \\\"assemblaLink\\\");\\r\\n            Date dateStart = (Date) customFieldInstanceService.getCFValue(project, \\\"dateStart\\\");\\r\\n            Date dateEnd = (Date) customFieldInstanceService.getCFValue(project, \\\"dateEnd\\\");\\r\\n            responseMap.put(\\\"code\\\", project.getCode());\\r\\n            responseMap.put(\\\"name\\\", project.getCode());\\r\\n            responseMap.put(\\\"client\\\", client);\\r\\n            responseMap.put(\\\"longDescription\\\", longDescription);\\r\\n            responseMap.put(\\\"shortDescription\\\", shortDescription);\\r\\n            responseMap.put(\\\"link\\\", link);\\r\\n            responseMap.put(\\\"logo\\\", logo);\\r\\n            responseMap.put(\\\"assemblaLink\\\", assemblaLink);\\r\\n            responseMap.put(\\\"dateStart\\\", DateUtils.formatDateWithPattern(dateStart, \\\"yyyy\\/MM\\/dd\\\"));\\r\\n            responseMap.put(\\\"dateEnd\\\", DateUtils.formatDateWithPattern(dateEnd, \\\"yyyy\\/MM\\/dd\\\"));\\r\\n        } else {\\r\\n            responseMap.put(\\\"code\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"name\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"client\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"longDescription\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"link\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"logo\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"assemblaLink\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"dateEnd\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"dateStart\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"shortDescription\\\", \\\"\\\");\\r\\n            responseMap.put(\\\"logoBase64\\\", \\\"\\\");\\r\\n        }\\r\\n        List<Contact> contacts = new ArrayList<>();\\r\\n        List<EntityReferenceWrapper> childEntityReferencesContacts = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(project, \\\"contacts\\\");\\r\\n        if (CollectionUtils.isNotEmpty(childEntityReferencesContacts)) {\\r\\n            for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesContacts) {\\r\\n                CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                if (cei == null) {\\r\\n                    continue;\\r\\n                }\\r\\n                Contact contact = new Contact();\\r\\n                String contactName = (String) customFieldInstanceService.getCFValue(cei, \\\"name\\\");\\r\\n                String position = (String) customFieldInstanceService.getCFValue(cei, \\\"position\\\");\\r\\n                String mail = (String) customFieldInstanceService.getCFValue(cei, \\\"mail\\\");\\r\\n                String skype = (String) customFieldInstanceService.getCFValue(cei, \\\"skype\\\");\\r\\n                String tel = (String) customFieldInstanceService.getCFValue(cei, \\\"tel\\\");\\r\\n                contact.setName(contactName);\\r\\n                contact.setPosition(position);\\r\\n                contact.setMail(mail);\\r\\n                contact.setSkype(skype);\\r\\n                contact.setTel(tel);\\r\\n                contact.setId(cei.getId());\\r\\n\\r\\n                contacts.add(contact);\\r\\n            }\\r\\n            responseMap.put(\\\"contacts\\\", contacts);\\r\\n        } else {\\r\\n            responseMap.put(\\\"contacts\\\", new ArrayList<Contact>());\\r\\n        }\\r\\n\\r\\n        List<Team> teams = new ArrayList<>();\\r\\n        List<EntityReferenceWrapper> childEntityReferencesTeams = (List<EntityReferenceWrapper>) customFieldInstanceService.getCFValue(project, \\\"teams\\\");\\r\\n        if (CollectionUtils.isNotEmpty(childEntityReferencesTeams)) {\\r\\n            for (EntityReferenceWrapper entityReferenceWrapper : childEntityReferencesTeams) {\\r\\n                CustomEntityInstance cei = customEntityInstanceService.findByCodeByCet(entityReferenceWrapper.getClassnameCode(), entityReferenceWrapper.getCode());\\r\\n                if (cei == null) {\\r\\n                    continue;\\r\\n                }\\r\\n                Team team = new Team();\\r\\n                String teamName = (String) customFieldInstanceService.getCFValue(cei, \\\"name\\\");\\r\\n                String role = (String) customFieldInstanceService.getCFValue(cei, \\\"role\\\");\\r\\n                team.setName(teamName);\\r\\n                team.setRole(role);\\r\\n                User user = userService.findByUsername(teamName);\\r\\n                if (user == null) {\\r\\n                    continue;\\r\\n                }\\r\\n                if(user.getName() != null) {\\r\\n                    if (!StringUtils.isBlank(user.getName().getFirstName()) && !StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                        team.setFullName(user.getName().getFirstName() + \\\" \\\" + user.getName().getLastName());\\r\\n                    }\\r\\n                    else if (StringUtils.isBlank(user.getName().getFirstName()) && !StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                        team.setFullName(user.getName().getLastName());\\r\\n                    }\\r\\n                    else if (!StringUtils.isBlank(user.getName().getFirstName()) && StringUtils.isBlank(user.getName().getLastName())) {\\r\\n                        team.setFullName(user.getName().getFirstName());\\r\\n                    }\\r\\n                    else {\\r\\n                        team.setFullName(\\\"\\\");\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                String photo = (String) customFieldInstanceService.getCFValue(user, \\\"photo\\\");\\r\\n                if (!StringUtils.isBlank(photo)) {\\r\\n                    try {\\r\\n                        team.setPhotoBase64(this.getPhoto(photo));\\r\\n                    } catch (BusinessApiException e) {\\r\\n                        log.info(\\\"Error photoBase64 size {}\\\", e.getMessage());\\r\\n                    }\\r\\n                } else {\\r\\n                    team.setPhotoBase64(\\\"\\\");\\r\\n                }\\r\\n                teams.add(team);\\r\\n            }\\r\\n            responseMap.put(\\\"teams\\\", teams);\\r\\n        } else {\\r\\n            responseMap.put(\\\"teams\\\", new ArrayList<Team>());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    @Override\\r\\n    public void init(Map<String, Object> context) throws BusinessException {\\r\\n        log.info(\\\"init...\\\");\\r\\n        customEntityInstanceService = (CustomEntityInstanceService) getServiceInterface(\\\"CustomEntityInstanceService\\\");\\r\\n        customFieldInstanceService = (CustomFieldInstanceService) getServiceInterface(\\\"CustomFieldInstanceService\\\");\\r\\n    }\\r\\n\\r\\n    public class Contact {\\r\\n\\r\\n        private String name;\\r\\n        private String position;\\r\\n        private String mail;\\r\\n        private String skype;\\r\\n        private String tel;\\r\\n        private Long id;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public String getPosition() { return position; }\\r\\n\\r\\n        public void setPosition(String position) { this.position = position; }\\r\\n\\r\\n        public String getMail() { return mail; }\\r\\n\\r\\n        public void setMail(String mail) { this.mail = mail; }\\r\\n\\r\\n        public String getSkype() { return skype; }\\r\\n\\r\\n        public void setSkype(String skype) { this.skype = skype; }\\r\\n\\r\\n        public String getTel() { return tel; }\\r\\n\\r\\n        public void setTel(String tel) { this.tel = tel; }\\r\\n\\r\\n        public Long getId() { return id; }\\r\\n\\r\\n        public void setId(Long id) { this.id = id; }\\r\\n\\r\\n    }\\r\\n\\r\\n    public class Team  {\\r\\n\\r\\n        private String name;\\r\\n        private String role;\\r\\n        private String fullName;\\r\\n        private String photoBase64;\\r\\n\\r\\n        public String getName() { return name; }\\r\\n\\r\\n        public void setName(String name) { this.name = name; }\\r\\n\\r\\n        public String getRole() { return role; }\\r\\n\\r\\n        public void setRole(String role) { this.role = role; }\\r\\n\\r\\n        public String getFullName() { return fullName; }\\r\\n\\r\\n        public void setFullName(String fullName) { this.fullName = fullName; }\\r\\n\\r\\n        public String getPhotoBase64() { return photoBase64; }\\r\\n\\r\\n        public void setPhotoBase64(String photoBase64) { this.photoBase64 = photoBase64; }\\r\\n    }\\r\\n\\r\\n    public Map<String, Object> getResponseMap() { return responseMap; }\\r\\n\\r\\n    public String getCode() { return code; }\\r\\n\\r\\n    public void setCode(String code) { this.code = code; }\\r\\n\\r\\n    public String getName() { return name; }\\r\\n\\r\\n    public void setName(String name) { this.name = name; }\\r\\n\\r\\n    public String getClient() { return client; }\\r\\n\\r\\n    public void setClient(String client) { this.client = client; }\\r\\n\\r\\n    public String getDateStart() { return dateStart; }\\r\\n\\r\\n    public void setDateStart(String dateStart) { this.dateStart = dateStart; }\\r\\n\\r\\n    public String getDateEnd() { return dateEnd; }\\r\\n\\r\\n    public void setDateEnd(String dateEnd) { this.dateEnd = dateEnd; }\\r\\n\\r\\n    public String getLongDescription() { return longDescription; }\\r\\n\\r\\n    public void setLongDescription(String longDescription) { this.longDescription = longDescription; }\\r\\n\\r\\n    public String getLink() { return link; }\\r\\n\\r\\n    public void setLink(String link) { this.link = link; }\\r\\n\\r\\n    public String getLogo() { return logo; }\\r\\n\\r\\n    public void setLogo(String logo) { this.logo = logo; }\\r\\n\\r\\n    public String getAssemblaLink() { return assemblaLink; }\\r\\n\\r\\n    public void setAssemblaLink(String assemblaLink) { this.assemblaLink = assemblaLink; }\\r\\n\\r\\n    public String getShortDescription() { return shortDescription; }\\r\\n\\r\\n    public void setShortDescription(String shortDescription) { this.shortDescription = shortDescription; }\\r\\n\\r\\n    public void setResponseMap(Map<String, Object> responseMap) { this.responseMap = responseMap; }\\r\\n\\r\\n    public List<Contact> getContacts() { return contacts; }\\r\\n\\r\\n    public void setContacts(List<Contact> contacts) { this.contacts = contacts; }\\r\\n\\r\\n    public List<Team> getTeams() { return teams; }\\r\\n\\r\\n    public void setTeams(List<Team> teams) { this.teams = teams; }\\r\\n\\r\\n    public String getLogoBase64() { return logoBase64; }\\r\\n\\r\\n    public void setLogoBase64(String logoBase64) { this.logoBase64 = logoBase64; }\\r\\n}\"\n    \n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/scriptInstance/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"scriptInstance",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GetProjects endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.GetProjectsScript\",\n    \"code\": \"getProjects\",\n    \"synchronous\": true,\n    \"method\": \"GET\",\n    \"pathParameters\": [],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"responseMap\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GenerateCV endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.GenerateCVScript\",\n    \"code\": \"generateCV\",\n    \"synchronous\": true,\n    \"method\": \"GET\",\n    \"pathParameters\": [\"username\",\"countryUtils\",\"meveoPath\",\"param\",\"rootProviderDir\",\"responseValues\"],\n    \"parameterMappings\" : \t[\"username\"],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"responseValues\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GenerateCVExport endpoint ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.GenerateCVExportScript\",\n    \"code\": \"GenerateCVExport\",\n    \"synchronous\": true,\n    \"method\": \"GET\",\n    \"pathParameters\": [\"username\",\"countryUtils\",\"meveoPath\",\"param\",\"rootProviderDir\"   ,\"responseValues\"],\n    \"parameterMappings\" : \t[\"username\"],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"responseValues\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveProject endpoint ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveProjectScript\",\n    \"code\": \"saveProject\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"code\",\t\"link\",\t\"logo\",\"longDescription\",\"contacts\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"code\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserCourses endpoint ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveUserCoursesScript\",\n    \"code\": \"saveUserCourses\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"courses\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveProjectAssembla endpoint  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveProjectAssemblaScript\",\n    \"code\": \"saveProjectAssembla\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"code\",\"assemblaLink\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"code\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserBio endpoint  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveUserBioScript\",\n    \"code\": \"saveUserBio\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"bio\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create UpdateImage endpoint  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.UpdateImageScript\",\n    \"code\": \"updateImage\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"photo\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GetUser endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.GetUserScript\",\n    \"code\": \"getUser\",\n    \"synchronous\": true,\n    \"method\": \"GET\",\n    \"pathParameters\": [\"username\",\"firstName\",\"lastName\",\"sinceDate\",\"photo\",\"job\",\"skypeld\",\"country\",\"linkedin\",\"bio\",\"photoBase64\"],\n    \"parameterMappings\" : [\"username\"\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"responseMap\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GetUsers endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.GetUsersScript\",\n    \"code\": \"getUsers\",\n    \"synchronous\": true,\n    \"method\": \"GET\",\n    \"pathParameters\": [],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"responseMap\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create UserUpdate endpoint  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.UserUpdateScript\",\n    \"code\": \"updateUser\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"email\",\"firstName\",\"lastName\",\"sinceDate\",\"job\",\"skypeId\",\"country\",\"linkedin\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create RemoveUserMission endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.RemoveUserMissionScript\",\n    \"code\": \"removeUserMission\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"mission\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserSkills endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveUserSkillsScript\",\n    \"code\": \"saveUserSkills\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"skills\"],\n    \"parameterMappings\" : [],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserProjects endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveUserProjectsScript\",\n    \"code\": \"saveUserProjects\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"projects\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserMission endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveUserMissionScript\",\n    \"code\": \"saveUserMission\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"mission\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserEducations endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveUserEducationsScript\",\n    \"code\": \"saveUserEducations\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"educations\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveUserAvailability endpoint  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveUserAvailabilityScript\",\n    \"code\": \"saveUserAvailability\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"username\",\"availability\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"username\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create SaveProjectTeam endpoint   ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.SaveProjectTeamScript\",\n    \"code\": \"saveProjectTeam\",\n    \"synchronous\": true,\n    \"method\": \"POST\",\n    \"pathParameters\": [\"code\",\"teams\"],\n    \"parameterMappings\" : [\n\t],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"code\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create GetProject endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"serviceCode\": \"org.meveo.script.GetProjectScript\",\n    \"code\": \"getProject\",\n    \"synchronous\": true,\n    \"method\": \"GET\",\n    \"pathParameters\": [\"code\",\"name\",\"client\",\"dateStart\",\"dateEnd\",\"longDescription\",\"link\",\"logo\",\"assemblaLink\",\"shortDescription\",\"responseMap\",\"contacts\",\"teams\",\"logoBase64\"],\n    \"parameterMappings\" : [\"code\"],\n\t\"contentType\": \"application/json\",\n\t\"returnedVariableName\": \"responseMap\",\n\t\"serializeResult\": true\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/endpoint",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"endpoint"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manaty CETs",
			"item": [
				{
					"name": "Create Client CET",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "meveo",
									"type": "string"
								},
								{
									"key": "username",
									"value": "meveo.admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Client\",\n        \"availableStorages\": [],\n        \"name\": \"Client\",\n        \"description\": \"Client\",\n        \"field\": [\n            {\n                \"code\": \"code\",\n                \"description\": \"code\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Client\",\n                \"appliesTo\": \"CE_Client\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Team:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"client\",\n                \"description\": \"Client\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Client\",\n                \"appliesTo\": \"CE_Client\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Team:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"description\",\n                \"description\": \"Description\",\n                \"fieldType\": \"TEXTAREA\",\n                \"accountLevel\": \"CE_Client\",\n                \"appliesTo\": \"CE_Client\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Team:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "http://localhost:8080/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ProjectUser CET ",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "meveo",
									"type": "string"
								},
								{
									"key": "username",
									"value": "meveo.admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"ProjectUser\",\n        \"availableStorages\": [],\n        \"name\": \"ProjectUser\",\n        \"description\": \"ProjectUser\",\n        \"field\": [\n            {\n                \"code\": \"name\",\n                \"description\": \"name\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"link\",\n                \"description\": \"link\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"logo\",\n                \"description\": \"logo\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n             {\n                \"code\": \"logoBase64\",\n                \"description\": \"logoBase64\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:3\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"assemblaLink\",\n                \"description\": \"assemblaLink\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:4\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n             {\n                \"code\": \"longDescription\",\n                \"description\": \"LongDescription\",\n                \"fieldType\": \"TextArea\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:5\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n\t\t     {\n\t\t\t\"code\": \"contacts\",\n\t\t\t\"description\": \"contacts\",\n\t\t\t\"fieldType\": \"CHILD_ENTITY\",\n\t\t\t\"accountLevel\": \"CE_ProjectUser\",\n\t\t\t\"appliesTo\": \"CE_ProjectUser\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"LIST\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - Contact\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:ProjectUser:0;field:6\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t {\n\t\t\t\"code\": \"teams\",\n\t\t\t\"description\": \"teams\",\n\t\t\t\"fieldType\": \"CHILD_ENTITY\",\n\t\t\t\"accountLevel\": \"CE_ProjectUser\",\n\t\t\t\"appliesTo\": \"CE_ProjectUser\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"LIST\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - Team\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:ProjectUser:0;field:7\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t{\n                \"code\": \"dateStart\",\n                \"description\": \"dateStart\",\n                \"fieldType\": \"DATE\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:8\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            \t{\n                \"code\": \"dateEnd\",\n                \"description\": \"dateEnd\",\n                \"fieldType\": \"DATE\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:9\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            \t{\n                \"code\": \"shortDescription\",\n                \"description\": \"ShortDescription\",\n                \"fieldType\": \"SRING\",\n                \"accountLevel\": \"CE_ProjectUser\",\n                \"appliesTo\": \"CE_ProjectUser\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:ProjectUser:0;field:10\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n            \n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "http://localhost:8080/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User CET  ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"User\",\n        \"sqlStorageConfiguration\": {\"storeAsTable\": false},\n        \"name\": \"User\",\n        \"description\": \"User\",\n        \"field\": [\n            {\n                \"code\": \"skypeId\",\n                \"description\": \"skypeId\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"country\",\n                \"description\": \"country\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"sinceDate\",\n                \"description\": \"sinceDate\",\n                \"fieldType\": \"DATE\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"photoBase64\",\n                \"description\": \"photoBase64\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:3\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n             {\n                \"code\": \"job\",\n                \"description\": \"job\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:4\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"bio\",\n                \"description\": \"bio\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:5\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n              {\n                \"code\": \"photo\",\n                \"description\": \"photo\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:6\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n             {\n\t\t\t\"code\": \"skills\",\n\t\t\t\"description\": \"skills\",\n\t\t\t\"fieldType\": \"STRING\",\n\t\t\t\"accountLevel\": \"CE_User\",\n\t\t\t\"appliesTo\": \"CE_User\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"MAP\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - SKill\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:User:0;field:7\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t  {\n\t\t\t\"code\": \"projects\",\n\t\t\t\"description\": \"projects\",\n\t\t\t\"fieldType\": \"STRING\",\n\t\t\t\"accountLevel\": \"CE_User\",\n\t\t\t\"appliesTo\": \"CE_User\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"MAP\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - ProjectRole\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:User:0;field:8\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t  {\n\t\t\t\"code\": \"educations\",\n\t\t\t\"description\": \"educations\",\n\t\t\t\"fieldType\": \"CHILD_ENTITY\",\n\t\t\t\"accountLevel\": \"CE_User\",\n\t\t\t\"appliesTo\": \"CE_User\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"courses\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - Education\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:User:0;field:9\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t {\n\t\t\t\"code\": \"courses\",\n\t\t\t\"description\": \"courses\",\n\t\t\t\"fieldType\": \"CHILD_ENTITY\",\n\t\t\t\"accountLevel\": \"CE_User\",\n\t\t\t\"appliesTo\": \"CE_User\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"LIST\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - Course\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:User:0;field:10\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t {\n\t\t\t\"code\": \"missions\",\n\t\t\t\"description\": \"missions\",\n\t\t\t\"fieldType\": \"CHILD_ENTITY\",\n\t\t\t\"accountLevel\": \"CE_User\",\n\t\t\t\"appliesTo\": \"CE_User\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"LIST\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - Mission\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:User:0;field:11\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t {\n\t\t\t\"code\": \"availability\",\n\t\t\t\"description\": \"availability\",\n\t\t\t\"fieldType\": \"CHILD_ENTITY\",\n\t\t\t\"accountLevel\": \"CE_User\",\n\t\t\t\"appliesTo\": \"CE_User\",\n\t\t\t\"useInheritedAsDefaultValue\": false,\n\t\t\t\"storageType\": \"LIST\",\n\t\t\t\"valueRequired\": false,\n\t\t\t\"versionable\": false,\n\t\t\t\"triggerEndPeriodEvent\": false,\n\t\t\t\"entityClazz\": \"org.meveo.model.customEntities.CustomEntityTemplate - Availability\",\n\t\t\t\"allowEdit\": true,\n\t\t\t\"hideOnNew\": false,\n\t\t\t\"guiPosition\": \"tab:User:0;field:12\",\n\t\t\t\"isUnique\": false,\n\t\t\t\"isFilter\": false,\n\t\t\t\"identifier\": false,\n\t\t\t\"fieldCode\": [\n\t\t\t\t\"code\",\n\t\t\t\t\"description\"\n\t\t\t]\n\t\t},\n\t\t{\n                \"code\": \"linkedin\",\n                \"description\": \"linkedin\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_User\",\n                \"appliesTo\": \"CE_User\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:User:0;field:13\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n\t\t\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Availability CET ",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "meveo",
									"type": "string"
								},
								{
									"key": "username",
									"value": "meveo.admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Availability\",\n        \"availableStorages\": [],\n        \"name\": \"Availability\",\n        \"description\": \"Availability\",\n        \"field\": [\n            {\n                \"code\": \"hoursWork\",\n                \"description\": \"hoursWork\",\n                \"fieldType\": \"LONG\",\n                \"accountLevel\": \"CE_Availability\",\n                \"appliesTo\": \"CE_Availability\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Availability:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"infos\",\n                \"description\": \"infos\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Availability\",\n                \"appliesTo\": \"CE_Availability\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Availability:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"timeZone\",\n                \"description\": \"timeZone\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Availability\",\n                \"appliesTo\": \"CE_Availability\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Availability:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"vocations\",\n                \"description\": \"vocations\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Availability\",\n                \"appliesTo\": \"CE_Availability\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"LIST\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Availability:0;field:3\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "http://localhost:8080/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Mission CET ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Mission\",\n       \"availableStorages\": [],\n        \"name\": \"Mission\",\n        \"description\": \"Mission\",\n        \"field\": [\n            {\n                \"code\": \"missionTitle\",\n                \"description\": \"missionTitle\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Mission\",\n                \"appliesTo\": \"CE_Mission\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Mission:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"missionDescription\",\n                \"description\": \"missionDescription\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Mission\",\n                \"appliesTo\": \"CE_Mission\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Mission:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"fromDate\",\n                \"description\": \"fromDate\",\n                \"fieldType\": \"DATE\",\n                \"accountLevel\": \"CE_Mission\",\n                \"appliesTo\": \"CE_Mission\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Mission:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"toDate\",\n                \"description\": \"toDate\",\n                \"fieldType\": \"DATE\",\n                \"accountLevel\": \"CE_Mission\",\n                \"appliesTo\": \"CE_Mission\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Mission:0;field:3\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"oldMissionTitle\",\n                \"description\": \"oldMissionTitle\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Mission\",\n                \"appliesTo\": \"CE_Mission\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Mission:0;field:4\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Course CET ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Course\",\n        \"availableStorages\": [],\n        \"name\": \"Course\",\n        \"description\": \"Course\",\n        \"field\": [\n            {\n                \"code\": \"courseTitle\",\n                \"description\": \"courseTitle\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Course\",\n                \"appliesTo\": \"CE_Course\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Course:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"fromYear\",\n                \"description\": \"fromYear\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Course\",\n                \"appliesTo\": \"CE_Course\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Course:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"toYear\",\n                \"description\": \"toYear\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Course\",\n                \"appliesTo\": \"CE_Course\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Course:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education CET",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Education\",\n      \"availableStorages\": [],\n        \"name\": \"Education\",\n        \"description\": \"Education\",\n        \"field\": [\n            {\n                \"code\": \"degreeTitle\",\n                \"description\": \"degreeTitle\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Education\",\n                \"appliesTo\": \"CE_Education\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Education:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"university\",\n                \"description\": \"university\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Education\",\n                \"appliesTo\": \"CE_Education\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Education:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"fromYear\",\n                \"description\": \"fromYear\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Education\",\n                \"appliesTo\": \"CE_Education\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Education:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"toYear\",\n                \"description\": \"toYear\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Education\",\n                \"appliesTo\": \"CE_Education\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Education:0;field:3\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project CET ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Project\",\n       \"availableStorages\": [],\n        \"name\": \"Project\",\n        \"description\": \"Project\",\n        \"field\": [\n            {\n                \"code\": \"name\",\n                \"description\": \"name\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Project\",\n                \"appliesTo\": \"CE_Project\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Project:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"role\",\n                \"description\": \"role\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Project\",\n                \"appliesTo\": \"CE_Project\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Project:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "{{protocol}}://{{hostname}}:{{port}}/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "{{protocol}}",
							"host": [
								"{{hostname}}"
							],
							"port": "{{port}}",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contact CET",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "meveo",
									"type": "string"
								},
								{
									"key": "username",
									"value": "meveo.admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Contact\",\n      \"availableStorages\": [],\n        \"name\": \"Contact\",\n        \"description\": \"Contact\",\n        \"field\": [\n            {\n                \"code\": \"name\",\n                \"description\": \"name\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Contact\",\n                \"appliesTo\": \"CE_Contact\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Contact:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"position\",\n                \"description\": \"position\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Contact\",\n                \"appliesTo\": \"CE_Contact\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Contact:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"mail\",\n                \"description\": \"mail\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Contact\",\n                \"appliesTo\": \"CE_Contact\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Contact:0;field:2\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"skype\",\n                \"description\": \"skype\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Contact\",\n                \"appliesTo\": \"CE_Contact\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Contact:0;field:3\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"tel\",\n                \"description\": \"tel\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Contact\",\n                \"appliesTo\": \"CE_Contact\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Contact:0;field:4\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "http://localhost:8080/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Skill CET",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "meveo",
									"type": "string"
								},
								{
									"key": "username",
									"value": "meveo.admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"code\": \"Skill\",\n        \"availableStorages\": [],\n        \"name\": \"Skill\",\n        \"description\": \"Skill\",\n        \"field\": [\n            {\n                \"code\": \"name\",\n                \"description\": \"name\",\n                \"fieldType\": \"STRING\",\n                \"accountLevel\": \"CE_Skill\",\n                \"appliesTo\": \"CE_Skill\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Skill:0;field:0\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            },\n            {\n                \"code\": \"ratio\",\n                \"description\": \"ratio\",\n                \"fieldType\": \"LONG\",\n                \"accountLevel\": \"CE_Skill\",\n                \"appliesTo\": \"CE_Skill\",\n                \"useInheritedAsDefaultValue\": false,\n                \"storageType\": \"SINGLE\",\n                \"valueRequired\": true,\n                \"versionable\": false,\n                \"triggerEndPeriodEvent\": false,\n                \"allowEdit\": true,\n                \"hideOnNew\": false,\n                \"maxValue\": 255,\n                \"guiPosition\": \"tab:Skill:0;field:1\",\n                \"isUnique\": false,\n                \"isFilter\": false,\n                \"identifier\": false\n            }\n        ],\n        \"action\": []\n    }"
						},
						"url": {
							"raw": "http://localhost:8080/meveo/api/rest/entityCustomization/cet/createOrUpdate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meveo",
								"api",
								"rest",
								"entityCustomization",
								"cet",
								"createOrUpdate"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "139b26dc-4bed-4dce-b753-d31ba76512b8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "249e4ee4-d8d0-4e61-a44c-031610ee09e0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a720f9f8-d193-40c2-81e4-7c3e03e9d59e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4fd55c37-b43a-4fd5-86e5-03a103c89951",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response code should be above 200\", function() {",
					"   pm.expect(pm.response.code).to.be.oneOf([102,200,201,202,204,403]); ",
					"});"
				]
			}
		}
	]
}